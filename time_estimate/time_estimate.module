<?php
// $Id: time_estimate.module,v 1.8 2010/07/22 00:33:04 codi Exp $

/**
 * @file
 * Enables time estimates on nodes.
 */

/**
 * Implements hook_permission().
 */
function time_estimate_permission() {
  return array(
    'administer time estimate' => array(
      'title' => t('Administer Time Testimate'),
      'description' => t('TODO: Add descriptions'),
    ),
    'view time estimate entries' => array(
      'title' => t('View time estimate entries'),
      'description' => t('TODO: Add descriptions'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function time_estimate_help($section, $arg) {
  switch ($section) {
    case 'admin/help#time_estimate':
      return t("<h2>Time Tracker Timer</h2>
        <p>Adds a time estimate field to content types that are tracking time. This module is very simple and has no settings page.</p>
        ");
      break;
  }
}

/**
 * Implements hook_menu().
 *
 */
function time_estimate_menu() {
  $items = array();
  return $items;
}

/**
 * Form builder function for module settings.
 */
function time_estimate_settings_form(&$form_state) {
  return $form;
}

function time_estimate_settings_form_submit($form, &$form_state) {
}

/**
 * Implements hook_form_alter().
 *
 */
function time_estimate_form_alter(&$form, $form_state, $form_id) {
  //If we're tracking time on the node

  $type = isset($form['#entity_type']) ? $form['#entity_type'] : FALSE;
  $bundle = isset($form['#bundle']) ? $form['#bundle'] :FALSE;
  //This is a hack for the time being. This limits time estimate to nodes.
  if($form_id == $type . '_node_form'){
    if ($type && time_tracker_is_tracking_time($type, $bundle)) {
      $entity = isset($form['#entity']) ? $form['#entity'] : FALSE;
      $info = entity_extract_ids($type, $entity);
      $bundle = $info[2];
      $entity_id = $info[0];

      global $user;

      if ($entity) {
        $time_estimate_data = db_query("SELECT * FROM {time_estimate_entry} WHERE entity_id = :entity_id AND entity_type = :entity_type",
          array(':entity_id' => $entity_id, ':entity_type' => $type))->fetchObject();
      }

      $form['time_estimate'] = array(
        '#type' => 'fieldset',
        '#title' => t('Time Estimate'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#weight' => 0,
      );
      $form['time_estimate']['uid'] = array(
        '#type' => 'value',
        '#value' => $user->uid,
      );
      $form['time_estimate']['eid'] = array(
        '#type' => 'value',
        '#value' => isset($time_estimate_data->eid) ? $time_estimate_data->eid : NULL,
      );
      $form['time_estimate']['timestamp'] = array(
        '#type' => 'value',
        '#default_value' => time()
      );
      $form['time_estimate']['estimate'] = array(
        '#title' => t('Estimated Time'),
        '#type' => 'textfield',
        '#size' => '4',
        '#default_value' => isset($time_estimate_data->estimate) ? $time_estimate_data->estimate : NULL,
        '#description' => t('eg. 2.5 for two and a half hours'),
      );

      return $form;
    }
  }
}

/**
 * Implements hook_node_view().
 */
function time_estimate_entity_view($entity, $type, $view_mode, $langcode) {
  $info = entity_extract_ids($type, $entity);
  $bundle = $info[2];
  $entity_id = $info[0];
  if (module_exists('casetracker') && casetracker_is_project($node->type)) {
    $total_time_estimate = 0;
    $total_time = 0;

    $case_results = db_query("SELECT * FROM {casetracker_case} WHERE pid = %d", $node->nid);

    while ($case = db_fetch_object($case_results)) {

      $case_estimate_results = db_query("SELECT * FROM {time_estimate_entry} WHERE nid = %d", $case->nid);
      $case_time_entry_results = db_query("SELECT * FROM {time_tracker_entry} WHERE nid = %d", $case->nid);

      while ($case_estimate = db_fetch_object($case_estimate_results)) {
        $total_time_estimate += $case_estimate->estimate;
      }

      while ($case = db_fetch_object($case_time_entry_results)) {
        $total_time += $case->duration - $case->deductions;
      }
    }

    if ($total_time_estimate > 0 && user_access('view time estimate entries')) {
      // We are going to override the time_tracker time logged display entirely
      unset($node->content['time_tracker_summary']);
      $entity->content['time_estimate'] = array(
        '#markup' => theme('time_estimate_summary', $total_time, $total_time_estimate),
        '#weight' => -9,
      );
    }
  }
  //Begin
  elseif (time_tracker_is_tracking_time($type, $bundle)) {
    $time_estimate = db_query("SELECT * FROM {time_estimate_entry} WHERE entity_id = :entity_id AND entity_type = :entity_type",
      array(':entity_id' => $entity_id, ':entity_type' => $type))->fetchObject();

    //foreach ($results as $result)) {
    //  $time_estimate = $result;
   // }
    if(!empty($time_estimate)){
      $entries = db_query("SELECT * FROM {time_tracker_entry} WHERE entity_id = :entity_id AND entity_type = :entity_type",
        array(':entity_id' => $entity_id, ':entity_type' => $type));
      $time_tracker_time = 0;
      foreach($entries as $entry) {
        $time_tracker_time += $entry->duration - $entry->deductions;
      }

      if ($time_estimate->estimate > 0 && user_access('view time estimate entries')) {
        // We are going to override the time_tracker time logged display entirely
        unset($entity->content['time_tracker']['time_tracker_summary']);
        $variables = array(
          'time' => $time_tracker_time,
          'estimate' => $time_estimate->estimate,
        );
        $entity->content['time_tracker']['time_estimate_summary'] = array(
          '#markup' => theme('time_estimate_summary', $variables),
          '#weight' => -7,
        );
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function time_estimate_entity_insert($entity, $type) {
  if (isset($entity->estimate) && $entity->estimate > 0) {
    $info = entity_extract_ids($type, $entity);
    $bundle = $info[2];
    $entity_id = $info[0];

    $estimate = new stdClass();
    $estimate->eid = $entity->eid;
    $estimate->entity_type = $type;
    $estimate->entity_bundle = $bundle;
    $estimate->entity_id = $entity_id;
    $estimate->uid = $entity->uid;
    $estimate->estimate = $entity->estimate;
    $estimate->timestamp = $entity->timestamp;

    return drupal_write_record('time_estimate_entry', $estimate);
  }
}

/**
 * Implements hook_entity_update().
 */
function time_estimate_entity_update($entity, $type) {
  $info = entity_extract_ids($type, $entity);
  $bundle = $info[2];
  $entity_id = $info[0];

  $estimate = new stdClass();
  $estimate->eid = $entity->eid;
  $estimate->entity_type = $type;
  $estimate->entity_bundle = $bundle;
  $estimate->entity_id = $entity_id;
  $estimate->uid = $entity->uid;
  $estimate->estimate = $entity->estimate;
  $estimate->timestamp = $entity->timestamp;

  if ($entity->eid > 0) {
    return drupal_write_record('time_estimate_entry', $estimate, 'eid');
  }
  else {
    return drupal_write_record('time_estimate_entry', $estimate);
  }
}
/**
 * Implements hook_entity_delete().
 */
function time_estimate_entity_delete($entity, $type) {
  $type_info = entity_get_info($type);
  $id_label = $type_info['entity keys']['id'];
  db_delete('time_estimate_entry')
    ->condition('entity_id', $entity->{$id_label}, '=')
    ->condition('entity_type', $type, '=')
    ->execute();
}

/************************************************************************
  THEME FUNCTIONS
*************************************************************************/

/**
 * Implementation of hook_theme().
 */
function time_estimate_theme() {
  return array(
    'time_estimate_project_summary' => array(),
    'time_estimate_summary' => array(
      'arguments' => array('variables' => NULL),
    ),
  );
}

/**
 * Theme function for the time estimate summary
 *
 * This theme function is meant to replace the Time Tracker Summary
 * output by theme_time_tracker_summary in module time_tracker
 *
 * @param $time_tracker_time
 *    Time logged so far in hours
 *
 * @param $time_estimate_time
 *    Time estimate in hours
 */
function theme_time_estimate_summary($variables) {
  $time = $variables['time'];
  $estimate = $variables['estimate'];
  $rows = array();

  if ($estimate > $time) {
    $class = 'time_under';
    $remaining = _time_tracker_format_hours_to_hours_and_minutes($estimate - $time, FALSE, TRUE) . t(' remaining');
  }
  else {
    $class = 'time_over';
    $remaining = t('over by: ') . _time_tracker_format_hours_to_hours_and_minutes(abs($estimate - $time), FALSE, TRUE);
  }

  $headers = array(
    array('data' => t('Estimated Time:')),
    array('data' => t('Time Logged:')),
  );

  $rows[] = array(
    array(
      'data' => '<span class="time_estimate_time">' .
                _time_tracker_format_hours_to_hours_and_minutes($estimate) . '</span>',
      'class' => array('time_estimate'),
    ),
    array(
      'data' => '<span class="time_tracker_time">' .
                _time_tracker_format_hours_to_hours_and_minutes($time) .
                '</span> <span class="time_tracker_remaining ' . $class .
                '">(' . $remaining . ')</span>',
      'class' => array('time_tracker'),
    ),
  );
  $table = array(
    'header' => $headers,
    'rows' => $rows,
    'attributes' => array('class' => array('time_estimate_summary')),
  );

  return theme('table', $table);
}

/**
 * Theme function for the time estimate project summary
 *
 * NOT BEING USED RIGHT NOW
 */
function theme_time_estimate_project_summary($time_tracker_time, $time_estimate_time) {
  // if (user_access('view time estimate entries')) {
  //   $rows = array();
  //
  //   if ($time_estimate_time > 0) {
  //     $rows[] = array(t('Estimated Time: ') . $time_estimate_time . ' hours (' . ($time_estimate_time - $time_tracker_time) . ' remaining)');
  //   }
  //
  //   return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  // }
}

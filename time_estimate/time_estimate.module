<?php
/**
 * @file
 * Enables time estimates on nodes.
 */

/**
 * Implementation of hook_perm().
 */
function time_estimate_perm() {
  return array('administer time estimate', 'view time estimate entries');
}

/*
 * Implementation of hook_menu().
 *
 */
function time_estimate_menu() {
  $items = array();
  $items['admin/settings/time_estimate'] = array(
    'title' => 'Time Estimate',
    'description' => 'Adjust time estimate settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_estimate_settings_form'),
    'access arguments' => array('administer time estimate'),
  );

  return $items;
}

/**
 * Form builder function for module settings.
 */
function time_estimate_settings_form(&$form_state) {
  return $form;
}

function time_estimate_settings_form_submit($form, &$form_state) {
}

/*
 * Implementation of hook_form().
 *
 */
function time_estimate_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    $form['time_estimate'] = array(
      '#type' => 'fieldset',
      '#title' => t('Time Estimate settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['time_estimate']['time_estimate_nodes'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable estimates on this content types nodes'),
      '#default_value' => variable_get('time_estimate_nodes_'. $form['#node_type']->type, 0),
      '#description' => t('Enable time estimates on this content types nodes.'),
    );
  }

  if (drupal_substr($form_id, -9) == 'node_form') {
    $node = node_load($form['nid']['#value']);

    if (variable_get('time_estimate_nodes_'. $node->type, 0)) {
      global $user;

      if ($form['nid']['#value']) {
        $results = db_query("SELECT * FROM {time_estimate_entry} WHERE nid = %d", $form['nid']['#value']);
        while ($result = db_fetch_object($results)) {
          $time_estimate_data = $result;
        }
      }

      $form['time_estimate']['nid'] = array();
      $form['time_estimate']['uid'] = array('#type' => 'value', '#value' => $user->uid);
      $form['time_estimate']['eid'] = array('#type' => 'value', '#value' => $time_estimate_data->eid);
      $form['time_estimate']['timestamp'] = array('#type' => 'value', '#default_value' => time());
      $form['time_estimate']['estimate'] = array(
        '#title' => t('Estimated Time'),
        '#type' => 'textfield',
        '#size' => '4',
        '#default_value' => $time_estimate_data->estimate,
        '#description' => t('eg. 2.5 for two and a half hours'),
      );

      return $form;
    }
  }
}

/*
 * 
 * Implementation of hook_node().
 */
function time_estimate_nodeapi(&$node, $op) {
  switch ($op) {
    case 'view':
      if (casetracker_is_project($node->type)) {
        $project_results = db_query("SELECT * FROM {node} WHERE type = %d", $node->type);

        while ($project = db_fetch_object($project_results)) {
          $case_estimate_results = db_query("SELECT * FROM {time_estimate_entry} WHERE nid = %d", $project->nid);
          $case_results = db_query("SELECT * FROM {time_tracker_entry} WHERE nid = %d", $project->nid);

          while ($case_estimate = db_fetch_object($case_estimate_results)) {
            $total_time_estimate = $total_time_estimate + $case_estimate->estimate;
          }

          while ($case = db_fetch_object($case_results)) {
            $total_time = $total_time + $case->duration;
          }
        }

        $node->content['casetracker_project_summary']['#value'] = $node->content['casetracker_project_summary']['#value'] . theme('time_estimate_project_summary', $total_time, $total_time_estimate);
      }
      else if (casetracker_is_case($node->type)) {
        $results = db_query("SELECT * FROM {time_estimate_entry} WHERE nid = %d", $node->nid);

        while ($result = db_fetch_object($results)) {
          $time_estimate = $result;
        }

        $results = db_query("SELECT * FROM {time_tracker_entry} WHERE nid = %d", $node->nid);

        while ($result = db_fetch_object($results)) {
          $time_tracker = $time_tracker + $result->duration;
        }

        $node->content['casetracker_case_summary']['#value'] = $node->content['casetracker_case_summary']['#value'] . theme('time_estimate_case_summary', $time_tracker, $time_estimate);
      }
    break;

    case 'insert':
      if (isset($node->estimate) && $node->estimate > 0) {
        return drupal_write_record('time_estimate_entry', $node);
      }
    break;

    case 'update':
      if (isset($node->eid)) {
        return drupal_write_record('time_estimate_entry', $node, 'eid');
      } else {
        return drupal_write_record('time_estimate_entry', $node);
      }
    break;

    case 'delete':
      db_query("DELETE FROM {time_estimate_entry} WHERE nid = %d", $node->nid);
    break;
  }
}

/**
 * Implementation of hook_theme().
 */
function time_estimate_theme() {
  return array(
    'time_estimate_project_summary' => array(),
    'time_estimate_case_summary' => array(),
  );
}

function theme_time_estimate_project_summary($time_tracker, $time_estimate) {
  if (user_access('view time estimate entries')) {
    $rows = array();

    if ($time_estimate > 0) {
      $rows[] = array(t('Estimated Hours: ') . $time_estimate . ' (Remaining: ' . ($time_estimate - $time_tracker) . ')');
    }

    return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  }
}

function theme_time_estimate_case_summary($time_tracker, $time_estimate) {
  if (user_access('view time estimate entries')) {
    $rows = array();

    if ($time_estimate->estimate > 0) {
      $rows[] = array(t('Estimated Hours: ') . $time_estimate->estimate . ' (Remaining: ' . ($time_estimate->estimate - $time_tracker) . ')');
    }

    return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  }
}
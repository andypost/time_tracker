<?php
// $Id: time_tracker.module,v 1.31 2010/07/22 00:32:32 codi Exp $

/**
 * @file
 * Enables time tracking on nodes and comments.
 */

/*
  The default date format for displaying dates and times
*/
define('TIME_TRACKER_DEFAULT_DATE_FORMAT', 'Y-m-d h:i A');


// TODO: Abstract the time_entry_form and make it themeable.

/************************************************************************
 * THE USUAL DRUPAL HOOKS
*************************************************************************/

/**
 * Implementation of hook_perm().
 */
function time_tracker_perm() {
  return array('administer time tracker', 'add time tracker entries',
    'view time tracker entries', 'edit time tracker entries', 
    'delete time tracker entires', 'administer time entries');
}

/**
 * Implementation of hook_menu().
 *
 */
function time_tracker_menu() {
  $items = array();
  
  $items['admin/settings/time_tracker'] = array(
    'title' => 'Time Tracker',
    'description' => 'Adjust time tracker settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_settings_form'),
    'access arguments' => array('administer time tracker'),
  );
  $items['admin/settings/time_tracker/settings'] = array(
    'title' => 'Time Tracker',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/time_tracker/activity/list'] = array(
    'title' => 'Activities',
    'description' => 'Adjust time tracker settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_activity_table_form'),
    'access arguments' => array('administer time tracker'),
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/settings/time_tracker',
  );
  $items['admin/settings/time_tracker/activity/delete/%'] = array(
    'title' => 'Delete Activity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_delete_activity_confirm', 5),
    'access arguments' => array('administer time tracker'),
  );
  $items['time_entry/edit/%'] = array(
    'title' => 'Time Entry',
    'description' => 'Edit a Time Entry',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_time_entry_form', 1, 2),
    'access arguments' => array('edit time tracker entries'),
  );

  return $items;
}

/**
 * What's this all about??
 */
function time_tracker_user_page($user) {
  $output = views_embed_view('time_tracker_user', 'default', $user->uid);

  return $output;
}

/**
 * Form builder function for time tracker settings.
 */
function time_tracker_settings_form(&$form_state) {
  
  // Warn the user about switching between time duration and time interval time entries
  $msg = t('Note that any entries that have been entered using the <em>duration</em> method will not have start and end times saved in the database. Switching from <em>duration</em> to <em>interval</em> will not retroactively create start and end times for past time entires.');
  
  $form = array();
  $form['time_tracker_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t("General Settings"),
  );
  $form['time_tracker_settings']['hide_comments'] = array(
    '#type' => 'checkbox',
    '#title' => t("Hide comments with time tracker data entirely if user does not have 'view time tracker entries' permission"),
    '#description' => t("Checking this setting will hide any comments that have time tracking data on them from any users without the 'view time tracker entries' permission"),
    '#default_value' => variable_get('hide_comments', 0),
  );
  $form['time_tracker_settings']['allow_locked_time_entries'] = array(
    '#type' => 'checkbox',
    '#title' => t("Allow locking of time entries"),
    '#description' => t("Checking this setting will allow users with the 'administer time entries' permission to lock time entries, preventing them from being editied."),
    '#default_value' => variable_get('allow_locked_time_entries', 0),
  );
  $form['time_tracker_fieldset_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t("Fieldset Settings"),
  );
  $form['time_tracker_fieldset_settings']['time_tracker_default_collapsed'] = array(
    '#type' => 'checkbox',
    '#title' => t("Collapse time entry form by default"),
    '#description' => t("Checking this setting will collapse the time tracker time entry form by default"),
    '#default_value' => variable_get('time_tracker_default_collapsed', 0),
  );
  $form['time_tracker_fieldset_settings']['time_entry_table_default_collapsed'] = array(
    '#type' => 'checkbox',
    '#title' => t("Collapse time entry table by default"),
    '#description' => t("When tracking time on nodes, checking this setting will collapse the time tracker time entry table by default"),
    '#default_value' => variable_get('time_entry_table_default_collapsed', 0),
  );
  $form['time_entry_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t("Time Entry Settings"),
  );
  $form['time_entry_settings']['time_entry_method'] = array(
    '#type' => 'radios',
    '#title' => t('Time Tracker Time Entry Method'),
    '#default_value' => variable_get('time_entry_method', 'duration'),
    '#options' => array(
      'duration' => t('Duration'), 
      'interval' => t('Time Interval (Start and End Times)')
    ),
  );
  $form['time_entry_settings']['time_entry_message'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="description">',
    '#suffix' => '</div>',
    '#value' => $msg,
  );
  
  return system_settings_form($form);
  
}


/**
 * Implementation of hook_views_api().
 */
function time_tracker_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'time_tracker') .'/views',
  );
}

/************************************************************************
 * BEGIN TIME TRACKER ACTIVITY CONFIG
*************************************************************************/

/**
 * Theme the activity table as a sortable list of activities.
 *
 * @ingroup themeable
 * @see time_tracker_activity_table()
 */
function theme_time_tracker_activity_table($form) {
  // The table headers
  $header = array(
    t('Activity Name'), 
    t('Enabled'),
    t('Delete'), 
    t('Weight')
  );
  // Take all the form elements and format theme for theme_table
  foreach (element_children($form['activities']) as $key) {
    if (isset($form['activities'][$key]['name'])) {
      // Add class to group weight fields for drag and drop.
      $form['activities'][$key]['weight']['#attributes']['class'] = 'activity-weight';
      // array to store row data
      $row = array();
      $row[] = drupal_render($form['activities'][$key]['name']);
      $row[] = drupal_render($form['activities'][$key]['status']);
      $row[] = drupal_render($form['activities'][$key]['delete']);
      $row[] = drupal_render($form['activities'][$key]['weight']);
      $rows[] = array('data' => $row, 'class' => 'draggable');
    }
  }
  // Theme it as a table
  $output = theme('table', $header, $rows, array('id' => 'activity-table'));
  $output .= drupal_render($form['add_new_activity']);
  // Render the form
  $output .= drupal_render($form);
  // Add the table drag functionality
  drupal_add_tabledrag('activity-table', 'order', 'sibling', 'activity-weight');
  // Return the themed activities table
  return $output;
}

/**
 * Time tracker activities table form. 
 * 
 * Generates the list of activites defined by users. 
 * To be themed as a sortable table (above)
 * 
 * @return $form
 *    - The unrendered $form array
 */
function time_tracker_activity_table_form() {
  
  // Grab all the activities ordered by weight
  $results = db_query('SELECT * FROM {time_tracker_activity} ORDER BY weight ASC');
  // Put activities in an array
  while ($result = db_fetch_object($results)) {
    $activities[$result->taid] = $result;
  }
  
  // Setup the form
  $form = array(
    '#tree' => TRUE,
    '#theme' => 'time_tracker_activity_table'
  );
  
  $form['add_new_activity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a new Activity'),
    '#tree' => TRUE,
  );
  
  $form['add_new_activity']['new_activity_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Activity Name'),
    '#size' => 30,
    '#description' => t('Add an activity that time can be tracked for.'),
    '#default_value' => '',
  );
  
  // Loop through the activites and add them to the form.
  if (count($activities) > 0) {
    foreach ($activities as $activity) {
      $form['activities'][$activity->taid]['#activity'] = (array)$activity;
      // The activity name
      $form['activities'][$activity->taid]['name'] = array(
        '#type' => 'textfield',
        '#default_value' => check_plain($activity->name),
      );
      // The weight (this is for the tabledrag we'll add in the theme function
      $form['activities'][$activity->taid]['weight'] = array(
        '#type' => 'textfield', 
        '#delta' => 10, 
        '#default_value' => $activity->weight
      );
      // Is this activity enabled?
      $form['activities'][$activity->taid]['status'] = array(
        '#type' => 'checkbox',
        '#title' => t('enabled'),
        '#default_value' => $activity->status ? TRUE : FALSE,
      );
      // The Edit link to edit the activity
      $form['activities'][$activity->taid]['delete'] = array(
        '#value' => l(t('delete'), "admin/settings/time_tracker/activity/delete/$activity->taid")
      );
    }
  }
  elseif (isset($activity)) {
    unset($form[$activity->taid]['weight']);
  }
  
  // The submit button for the form
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Save'),
    '#submit' => array('time_tracker_activity_table_form_submit'),
  );
  
  // Return the form
  return $form;
}

/**
 * Time tracker activity form submit handler.
 *
 * @param $form
 * @param $form_state
 */
function time_tracker_activity_table_form_submit($form, &$form_state) {
  // If we're adding a new one
  if ($form_state['values']['add_new_activity']['new_activity_name']) {
    $activity = array();
    $activity['name'] = $form_state['values']['add_new_activity']['new_activity_name'];
    $activity['weight'] = count($form_state['values']['activities']) + 1;
    $activity['status'] = 1;
    drupal_write_record('time_tracker_activity', $activity);
  }
  if (count($form_state['values']['activities']) > 0) {
    foreach ($form_state['values']['activities'] as $taid => $activity) {
      // If anything has changed...
      if (is_numeric($taid) && ($form[$taid]['#activity']['weight'] != $activity['weight'] || $form[$taid]['#activity']['status'] != $activity['status'] || $form[$taid]['#activity']['name'] != $activity['name'])) {
        $activity['taid'] = $taid;
        drupal_write_record('time_tracker_activity', $activity, array('taid'));
      }
    }
  }
  drupal_set_message('Activities Saved');
}

/**
 * Form builder function for module time tracker activities.
 */
function time_tracker_delete_activity_confirm(&$form_state, $taid) {
  
  $form = array();
    
  if ($taid) {
    $form['taid'] = array(
      '#type' => 'value',
      '#default_value' => $taid,
    );
    $question = t('Are you sure you want to delete the activity: !activity_name', array('!activity_name' => get_activity_name($taid)));
    return confirm_form($form, $question, 'admin/settings/time_tracker/activity/list');
  }
  else {
    return $form['msg']['#value'] = 'No Activity ID passed in.';
  }
}

/**
 * Time tracker activity form submit handler.
 *
 * @param $form
 * @param $form_state
 */
function time_tracker_delete_activity_confirm_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/settings/time_tracker/activity/list';
  db_query('DELETE FROM {time_tracker_activity} WHERE taid = ' . $form_state['values']['taid']);
  drupal_set_message(t('Activity %name Deleted', array('%name' => $form_state['values']['name'])));
}

/************************************************************************
  BEGIN ACTUAL TIME TRACKER CODE -- DRUPAL HOOKS
*************************************************************************/

/**
 * Implementation of hook_form_alter().
 *
 * Adds the options for tracking time to the 
 */
function time_tracker_form_alter(&$form, $form_state, $form_id) {
  // what are we tracking time on?
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    $form['time_tracker'] = array(
      '#type' => 'fieldset',
      '#title' => t('Time Tracker settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['time_tracker']['time_tracker_nodes'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track time on this content types nodes'),
      '#default_value' => variable_get('time_tracker_nodes_' . $form['#node_type']->type, 0),
      '#description' => t('Track time on this content types nodes.'), 
    );
    $form['time_tracker']['time_tracker_comments'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track time on this content types comments'),
      '#default_value' => variable_get('time_tracker_comments_' . $form['#node_type']->type, 0),
      '#description' => t('Track time on this content types comments.'),
    );
  }

  // if this is a comment form and we're tracking time on it.
  if ($form_id == 'comment_form' && user_access('add time tracker entries')) {

    $node = node_load($form['nid']['#value']);

    if (variable_get('time_tracker_comments_' . $node->type, 0)) {
      $form = array_merge($form, time_tracker_time_entry_form(NULL, 'comment', $form['cid']['#value']));
    }
  }
  
}

/**
 * Implementation of hook_nodeapi().
 */
function time_tracker_nodeapi(&$node, $op) {
  switch ($op) {
    case 'view':
      if (user_access('view time tracker entries')) {
        // If case tracker exists then we can check if it's a project
        if (module_exists('casetracker') && casetracker_is_project($node->type)) {
          $case_results = db_query("SELECT * FROM {casetracker_case} WHERE pid = %d", $node->nid);
        
          while ($case = db_fetch_object($case_results)) {
            $time_results = db_query("SELECT * FROM {time_tracker_entry} WHERE nid = %d", $case->nid);

            while ($time = db_fetch_object($time_results)) {
              $total_time = $total_time + $time->duration;
            }
          }
          if($total_time > 0) {
            $node->content['time_tracker_summary'] = array(
              '#value' => theme('time_tracker_summary', $total_time),
              '#weight' => -5,
            );
          }
        
        } 
        else {
          // if this is a node form display the time tracker
          $resource = db_query("SELECT * FROM {time_tracker_entry} WHERE nid = %d", $node->nid);
        
          while ($time_entry = db_fetch_object($resource)) {
            $total_time = $total_time + $time_entry->duration;
          }
          
          if ($total_time > 0) {
            $node->content['time_tracker_summary'] = array(
              '#value' => theme('time_tracker_summary', $total_time),
              '#weight' => -5,
            );
          }
        }
      
        // display the time tracking form for nodes here.
        if (variable_get('time_tracker_nodes_' . $node->type, 0)) {
          // Store time entries from nodes
          $node_time_entries = array();
          $sql = "SELECT * FROM {time_tracker_entry} AS t
                  WHERE nid = %d AND cid = 0
                  ORDER BY t.timestamp DESC, t.start DESC, t.teid DESC";
          // Get the entries associated with this node
          $resource = db_query($sql, $node->nid);
          // Store the db objects in an array for theme function
          while ($time_entry = db_fetch_object($resource)) {
            $node_time_entries[] = $time_entry;
          }
          $node->content['time_tracker'] = array(
            '#value' => theme('time_tracker_time_entry_table', $node_time_entries) . 
                        drupal_get_form('time_tracker_time_entry_form', 'node', $node->nid),
            '#weight' => 51,
          );
        }
      }
    break;
    
    case 'delete':
      db_query("DELETE FROM {time_tracker_entry} WHERE nid = %d", $node->nid);
    break;
    
    case 'insert':
    case 'update':
      
    break;
  }
}

/**
 * Implementation of hook_comment().
 * 
 * TODO: previews aren't showing any time_tracker data.
 */
function time_tracker_comment(&$comment, $op) {

  switch ($op) {
    case 'view':
    // We only want to show time tracker data if user has permission
      if (user_access('view time tracker entries')) {
        // If this is a preview we won't have a cid yet.
        if (empty($comment->cid)) {
          $time_tracker_data = (object)$comment->time_tracker;
          $node = node_load($comment->nid);
        }
        else {
          $results = db_query("SELECT * FROM {time_tracker_entry} WHERE cid = %d", $comment->cid);
          while ($result = db_fetch_object($results)) {
            $time_tracker_data = $result;
          }
        }
        if (is_object($time_tracker_data)) {
          // This will flag the comment so it can be hidden
          // hide flag is triggered in the preprocess function below
          $comment->status = 2;
        }
        $comment->comment = theme('time_tracker_comment', $time_tracker_data) . $comment->comment;
      }
    break;

    case 'validate':
      $form_state['values'] = $comment;
      time_tracker_time_entry_validate(NULL, $form_state);
      
    break;

    case 'insert':
    case 'update':
      // A little extra love for casetracker
      // if (isset($comment['casetracker'])) {
      //   $comment['pid'] = $comment['casetracker']['pid'];
      // }
      // elseif (module_exists('casetracker')) {
      //   $node = node_load($comment['nid']);
      //   if (casetracker_is_project($node->type)) {
      //     $comment['pid'] = $node->nid;
      //   }
      // }
      // Check First if we are tracking by duration or time interval
      if (variable_get('time_entry_method', 'duration') == 'duration') {
        $duration = _time_tracker_parse_duration($comment['duration']);
        if ($duration > 0) {
          $comment['duration'] = $duration;
          $comment['timestamp'] = strtotime($comment['time']);
          unset($comment['time']);
          // Update or create the time entry
          return drupal_write_record('time_tracker_entry', $comment, $comment['teid'] ? 'teid' : array());
        } 
        elseif ($comment['teid']) {
          // No duration, but there WAS duration information -- someone wants
          // to remove the time entry!
          db_query("DELETE FROM {time_tracker_entry} WHERE teid = %d", $comment['teid']);
        }
      }
      elseif (variable_get('time_entry_method', 'duration') == 'interval') {
        if (strlen($comment['start']) && strlen($comment['end'])) {
          $comment['start'] = strtotime($comment['start']);
          $comment['timestamp'] = strtotime($comment['start']);
          $comment['end'] = strtotime($comment['end']);
          //Do we make the duration into a timestamp now??
          $comment['duration'] = _time_tracker_parse_duration(convert_phptime_to_duration( $comment['start'], $comment['end']));
          return drupal_write_record('time_tracker_entry', $comment, $comment['teid'] ? 'teid' : array());
        }
        elseif ($comment['teid']) {
          // No duration, but there WAS duration information -- someone wants
          // to remove the time entry!
          db_query("DELETE FROM {time_tracker_entry} WHERE teid = %d", $comment['teid']);
        }
      }
      
    break;

    case 'delete':
      db_query("DELETE FROM {time_tracker_entry} WHERE cid = %d", $comment->cid);
    break;
  }
}

/***********************************************************************
 * TIME TRACKER -- TIME ENTRY FORM
 ***********************************************************************/

/**
 * Defines the time entry form
 *
 * NOTE: This was a first step in refactoring this form into it's own function
 *
 * @param $type
 *    The type of time entry form to show. Choose from:
 *    'node':     Form when tracking time on nodes
 *    'edit':     Form when editing time entries. Specifically applies to 
 *                time entries tracked on nodes. Comment time entry editing
 *                is done when editing the comment
 *    'comment':  Form when tracking time on comments
 * 
 * @param $id
 *    Depending on the type:
 *    'node' => nid (node id)
 *    'edit' => teid (time entry id)
 *    'comment => cid (comment id)
 * 
 */
function time_tracker_time_entry_form($form_state, $type = 'node', $id = 0) {
  global $user;
  // TODO? Add Javascript to auto complete the duration field
  // For time interval entries
  //drupal_add_js();
  
  drupal_add_css(drupal_get_path('module', 'time_tracker') .'/css/time_tracker.css');
  
  $activities = get_active_activities_options();
  
  $lock = FALSE;
  
  $form['time_tracker'] = array(
    '#type' => 'fieldset',
    '#title' => t('Time Tracker'),
    '#collapsible' => TRUE,
    '#collapsed' => variable_get('time_tracker_default_collapsed', 0),
    '#weight' => -9,
  );
  
  // If we are editing a comment...
  if ($type == 'comment' && $id) {
    // Gotta grab the comment's info if we're editing an old comment
    $results = db_query("SELECT * FROM {time_tracker_entry} WHERE cid = %d", $id);
    $time_tracker_data = db_fetch_object($results);
    // Need a comment id for comment tracking
    $form['cid'] = array(
      '#type' => 'value',
      '#value' => $time_tracker_data->cid ? $time_tracker_data->cid : $id,
    );
  }
  elseif ($type == 'edit' && $id) {
    $results = db_query("SELECT * FROM {time_tracker_entry} WHERE teid = %d", $id);
    $time_tracker_data = db_fetch_object($results);
    // The node this time entry belongs to
    $form['nid'] = array(
      '#type' => 'value',
      '#value' => $time_tracker_data->nid,
    );
    if (user_access('delete time tracker entries') || user_access('administer time entries')) {
      // A delete button
      $form['time_tracker']['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#weight' => 8,
        '#submit' => array('time_tracker_time_entry_delete'),
      );
    }
    // We will redirect to the node this time entry belongs to once edited
    $form['#redirect']['redirect'] = 'node/' . $time_tracker_data->nid;
  }
  elseif ($type == 'node' && $id) {
    // Just need the nid for node time entries
    $form['nid'] = array(
      '#type' => 'value',
      '#value' => $id,
    );
  }
  
  // If there is a time tracker entry data object
  if ($time_tracker_data) {
    // If it's an existing time entry, we need the teid
    $form['teid'] = array(
      '#type' => 'value',
      '#value' => $time_tracker_data->teid,
    );
    if (variable_get('allow_locked_time_entries', 0)) {
      if (user_access('administer time entries')) {
        $form['time_tracker']['locked'] = array(
          '#title' => t('Locked'),
          '#type' => 'checkbox',
          '#description' => 'Lock this time entry, preventing further editing',
          '#default_value' => $time_tracker_data->locked ? TRUE : FALSE,
          '#weight' => 6.5,
        );
      }
      elseif ($time_tracker_data->locked) {
        // We will use $lock throughout the form to determine whether or not
        // we should be hiding the form elements. We want to keep them intact,
        // however for the comments form by making their type 'value' because
        // we don't want to prevent the saving of comment forms directly, we
        // just want to prevent the changing of time entry data.
        $lock = TRUE;
        $msg = 'This time entry is locked from editing.';
        $form['time_tracker']['locked_msg'] = array(
          '#value' => $msg,
        );
        unset($form['time_tracker']['delete']);
      }
    }
  }
  
  $user_submit = user_load($time_tracker_data->uid);

  // Auto complete user reference but only if you have permission
  $form['time_tracker']['username'] = array(
    '#title' => t('User'),
    '#access' => user_access('administer time entries'),
    '#size' => '15',
    '#type' => $lock ? 'value' : 'textfield',
    '#weight' => 0,
    '#default_value' => $user_submit->name ? $user_submit->name : $user->name,
    '#autocomplete_path' => 'user/autocomplete',
  );
  
  // The activity choser
  $form['time_tracker']['activity'] = array(
    '#title' => t('Activity'),
    '#type' => $lock ? 'value' : 'select',
    '#weight' => 0,
    '#options' => $activities,
    '#default_value' => $time_tracker_data->activity,
  );
  
  // Add some javascript and css for the datepicker
  if (module_exists('jquery_ui')) {
    jquery_ui_add(array('ui.datepicker'));
    drupal_add_js(drupal_get_path('module', 'time_tracker') .'/js/datepicker.settings.js');
    drupal_add_css(drupal_get_path('module', 'jquery_ui') .'/jquery.ui/themes/default/ui.datepicker.css');
  }
  
  // Insert different form elements depending on the time_entry_method
  if (variable_get('time_entry_method', 'duration') == 'duration') {
    $form['time_tracker']['time_entry']['time'] = array(
      '#title' => t('Date'),
      '#type' => $lock ? 'value' : 'textfield',
      '#size' => '20',
      '#weight' => 0,
      '#default_value' => empty($time_tracker_data->timestamp) ? date("F d, Y", time()) : date("F d, Y", $time_tracker_data->timestamp),
    );
    $form['time_tracker']['time_entry']['duration'] = array(
      '#title' => t('Hours'),
      '#type' => $lock ? 'value' : 'textfield',
      '#size' => '10',
      '#weight' => 1,
      '#default_value' => $time_tracker_data->duration,
      '#description' => t('eg. 2.5 or 2:30 for two and a half hours'),
    );
  } 
  else { // Time entry method is 'interval'
    $format = TIME_TRACKER_DEFAULT_DATE_FORMAT; // This should be defined in settings...
    $form['time_tracker']['time_entry']['prefix'] = array(
      '#value' => '<div class="time_entry">',
      '#weight' => 0,
    );
    $form['time_tracker']['time_entry']['start'] = array(
      '#title' => t('Start'),
      '#type' => $lock ? 'value' : 'date_popup',
      '#default_value' => $time_tracker_data->start ? date($format, $time_tracker_data->start) : '',
      '#date_format' => $format,
      '#date_label_position' => 'within',
      '#weight' => 1,
    );
    $form['time_tracker']['time_entry']['end'] = array(
      '#title' => t('End'),
      '#type' => $lock ? 'value' : 'date_popup',
      '#default_value' => $time_tracker_data->end ? date($format, $time_tracker_data->end) : '',
      '#date_format' => $format,
      '#date_label_position' => 'within',
      '#weight' => 2,
    );
    $form['time_tracker']['time_entry']['suffix'] = array(
      '#value' => '</div>',
      '#weight' => 3,
    );
    // If duration data exists already we post a note to the user
    if ($time_tracker_data->duration && !($time_tracker_data->end) && !($time_tracker_data->start)) {
      $form['time_tracker']['duration_msg'] = array(
        '#prefix' => '<div class="description"><em>',
        '#value' => t("A duration value exists for this time entry, but no Start and End time. <br/> Saving this entry with a Start and End time will overwrite the duration<br/> Logged Duration: <b>!duration</b>", array('!duration' => format_hours_to_hours_and_minutes($time_tracker_data->duration))),
        '#suffix' => '</em></div>',
        '#weight' => 4,
      );
    }
  }
  
  // If this isn't meant to track time on a comment, we need a submit button and notes field
  if ($type != 'comment') {
    $form['time_tracker']['note'] = array(
      '#title' => t('Note'),
      '#type' => $lock ? 'value' : 'textarea',
      '#weight' => 6,
      '#rows' => 2,
      '#resizable' => FALSE,
      '#default_value' => $time_tracker_data->note,
    );
    if (!$lock) {
      $form['time_tracker']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#weight' => 7,
      );
    }
    $form['#validate'] = array('time_tracker_time_entry_validate');
    $form['#submit'] = array('time_tracker_time_entry_submit');
  }
  
  // // If we're allowing for locked time entries,
  // // ensure user has permissions to edit locked entries
  // if (variable_get('allow_locked_time_entries', 0) && $time_tracker_data->locked && !user_access('administer time entries')) {
  //   // No go, redirect
  //   drupal_goto('node/' . $time_tracker_data->nid);
  //   return;
  // }

  return $form;
}

function time_tracker_time_entry_validate($form, &$form_state) {
  $values = $form_state['values'];
  // Check First if we are tracking by duration or time interval
  if (variable_get('time_entry_method', 'duration') == 'duration') {
    // If a duration is set, but no date
    if (strlen($values['duration']) && !strlen($values['time'])) {
      form_set_error('time', t('Invalid Date Value. You must also set a date if you wish to log time'));
    }
    // If a duration is set, but it is invalid
    if (strlen($values['duration']) && _time_tracker_parse_duration($values['duration']) === FALSE) {
      form_set_error('duration', t('Invalid duration value. You may enter time fractions such as 1.25 or hour and minute values such as 2:30.'));
    }
  }
  elseif (variable_get('time_entry_method', 'duration') == 'interval') {
    // If there is no start time, but there is an end time
    if (!strlen($values['start']) && strlen($values['end'])) {
      form_set_error('start][date', t('Enter an End time, or no time at all'));
    }
    // If there is no end time, but there is an start time
    if (!strlen($values['end']) && strlen($values['start'])) {
      form_set_error('end][date', t('Enter a Start time, or no time at all'));
    }
      // Make sure From date is before To Date
    if (strlen($values['start']) && strlen($values['end'])) {
      $start = strtotime($values['start']);
      $end = strtotime($values['end']);
      if ($start >= $end) {
        form_set_error('start][date', t('Invalid interval value. Start time must come before End time'));
      }
    }
  }
}

function time_tracker_time_entry_submit($form, &$form_state) {
  
  // Our array for drupal_write_record
  $time = array();
  // Our submitted form values
  $values = $form_state['values'];
  // Need a user
  $user = user_load(array('name' => $values['username']));
  // If this is an existing time entry...
  $time['teid'] = $values['teid'];
  
  // Special handling based on the time entry method
  if (variable_get('time_entry_method', 'duration') == 'duration') {
    $time['start'] = 0;
    $time['end'] = 0;
    $time['duration'] = _time_tracker_parse_duration($values['duration']);
    $time['timestamp'] = strtotime($values['time']);
  }
  elseif (variable_get('time_entry_method', 'duration') == 'interval') {
    $time['start'] = strtotime($values['start']);
    $time['timestamp'] = strtotime($values['start']);
    $time['end'] = strtotime($values['end']);
    $time['duration'] = _time_tracker_parse_duration(convert_phptime_to_duration($time['start'], $time['end']));
  }
  
  // The rest of the time entry 
  $time['activity'] = $values['activity'];
  $time['uid'] = $user->uid;
  $time['nid'] = $values['nid'];
  $time['note'] = $values['note'];

  // If locked was in the form use it
  if(isset($values['locked'])) {
    $time['locked'] = $values['locked'];
  }
  // Otherwise default to FALSE
  else {
    $time['locked'] = FALSE;
  }
  
  // Update the db and send a message to the user
  drupal_write_record('time_tracker_entry', $time, $time['teid'] ? 'teid' : array());
  drupal_set_message(t('Time Entry Recorded'));
}

function time_tracker_time_entry_delete($form, &$form_state) {
  if ($form_state['values']['teid']) {
    db_query("DELETE FROM {time_tracker_entry} WHERE teid = %d", $form_state['values']['teid']);
  }
  drupal_set_message(t('Time Entry Deleted'));
}


/***********************************************************************
 * THEME FUNCTIONS
 ***********************************************************************/

/**
 * Implementation of hook_theme().
 */
function time_tracker_theme() {
  return array(
    'time_tracker_time_entry_table' => array(),
    'time_tracker_comment' => array(),
    'time_tracker_project_summary' => array(), // not in use
    'time_tracker_summary' => array(),
    'time_tracker_activity_table' => array(
      'arguments' => array('form' => array()),
    ),
  );
}

/**
 * Theme function for showing time entries on nodes
 * 
 * @param $time_entries
 *    An array of time entry database objects. 
 *    Time entry object contains properties:
 *      $obj->teid: The time entry id
 *      $obj->nid: The node id this time entry is attached to
 *      $obj->uid: The user id to whom this time entry belongs
 *      $obj->cid: If applicable, the comment id for this time entry
 *      $obj->pid: If applicable, the casetracker project id for this time entry (deprecated)
 *      $obj->activity: The time entry Activity
 *      $obj->timestamp: The unix timestamp of when this time entry was dated
 *      $obj->start: If tracking time by interval, the start time of the entry
 *      $obj->end: If tracking time by interval, the end time of the entry
 *      $obj->duration: The time entry duration in HOURS
 *      $obj->note: Any notes about the time entry (Empty for time tracked on comments)
 *      $obj->billable: Whether this is billable or not (0 => no, 1 => yes)
 *      $obj->locked: Whether this entry has been locked, requires extra permissions
 */
function theme_time_tracker_time_entry_table($time_entries) {
  drupal_add_css(drupal_get_path('module', 'time_tracker') .'/css/time_tracker.css');
  //Some Variables to make this happen
  $time;
  $rows[] = array();
  //Setting up the table headers
  $header = array(
    array('data' => t('User')),
    array('data' => t('Activity')),
    array('data' => t('Duration')),
    array('data' => t('Time')),
    array('data' => t('Note')),
  );
  if (user_access('edit time tracker entries') || user_access('administer time entries')) {
   $header[] = array('data' => t('Ops'));
  }
  //Loop through the time entries and add them to the table
  foreach ($time_entries as $time_entry) {
    if (variable_get('time_entry_method', 'duration') == 'duration') {
      $time = date("F d, Y", $time_entry->timestamp);
    }
    elseif (variable_get('time_entry_method', 'duration') == 'interval') {
      if ($time_entry->start && $time_entry->end) {
        $time = '' . date('h:i A - M d, Y', $time_entry->start) . '<br/>' . date('h:i A - M d, Y', $time_entry->end);
      }
      else {
        $time = date("F d, Y", $time_entry->timestamp) . '<br/>Entered as Duration';
      }
    }
    $row = array(//row
      'data' => array( //row data
        array( //Cell1
          'data' => user_load($time_entry->uid)->name,
          'class' => 'time_entry_username',
        ),
        array( //Cell2
          'data' => get_activity_name($time_entry->activity),
          'class' => 'time_entry_username',
        ),
        array( //Cell3
          'data' => format_hours_to_hours_and_minutes($time_entry->duration),
          'class' => 'time_entry_duration',
        ),
        array( //Cell4
          'data' => $time,
          'class' => 'time_entry_time',
        ),
        array( //Cell5
          'data' => $time_entry->note,
          'class' => 'time_entry_note',
        ),
      ),
      'class' => '', //row class
    );//endrow
    if (user_access('edit time tracker entries') || user_access('administer time entries')) {
      // If entry is locked and user does not have proper permissions
   	  if (variable_get('allow_locked_time_entries', 0) && $time_entry->locked && !user_access('administer time entries')) {
   	    $row['data'][] = array( //Cell6
   	      'data' => t('locked'),
   	      'class' => 'time_entry_edit',
   	    );
   	  } 
      else {
        $row['data'][] = array( //Cell6
          'data' => l(t('edit'), 'time_entry/edit/' . $time_entry->teid),
          'class' => 'time_entry_edit',
        );
      }
    }
    $rows[] = $row;
  }
  $form = array();
  $form['time_tracker_time_entries'] = array(
    '#type' => 'fieldset',
    '#title' => t('Time Tracker Time Entries'),
    '#collapsible' => TRUE,
    '#collapsed' => variable_get('time_entry_table_default_collapsed', 0),
  );
  $form['time_tracker_time_entries']['entry_table'] = array(
    '#value' => theme('table', $header, $rows, array('class' => 'time_tracker_time_entries')),
  );
  return drupal_render($form);
}

/**
 * Theme function for time entries on comments.
 * 
 * @param $time_entry
 *    A time entry database object. 
 *    Time entry object contains properties:
 *      $obj->teid: The time entry id
 *      $obj->nid: The node id this time entry is attached to
 *      $obj->uid: The user id to whom this time entry belongs
 *      $obj->cid: If applicable, the comment id for this time entry
 *      $obj->pid: If applicable, the casetracker project id for this time entry (deprecated)
 *      $obj->activity: The time entry Activity
 *      $obj->timestamp: The unix timestamp of when this time entry was dated
 *      $obj->start: If tracking time by interval, the start time of the entry
 *      $obj->end: If tracking time by interval, the end time of the entry
 *      $obj->duration: The time entry duration in HOURS
 *      $obj->note: Any notes about the time entry (Empty for time tracked on comments)
 *      $obj->billable: Whether this is billable or not (0 => no, 1 => yes)
 *      $obj->locked: Whether this entry has been locked, requires extra permissions
 */
function theme_time_tracker_comment($time_entry) {
  if (is_object($time_entry)) {
    $rows = array();
    $time = '';
    
    $activity = get_activity_name($time_entry->activity);
    if ($activity) {
      $activity = '(' . $activity . ') ';
    }
    
    if ($time_entry->start && $time_entry->end) {
      $header = array(
        array('data' => t('Duration')),
        array('data' => t('Activity')),
        array('data' => t('Start')),
        array('data' => t('End')),
      );
      $rows[] = array(//row
        'data' => array( //row data
          array( //Cell3
            'data' => format_hours_to_hours_and_minutes($time_entry->duration),
            'class' => 'time_entry_duration',
          ),
          array( //Cell2
            'data' => get_activity_name($time_entry->activity),
            'class' => 'time_entry_activity',
          ),
          array( //Cell4
            'data' => date('h:i A - M d, Y', $time_entry->start),
            'class' => 'time_entry_start',
          ),
          array( //Cell5
            'data' => date('h:i A - M d, Y', $time_entry->end),
            'class' => 'time_entry_end',
          ),
        ),
        'class' => '', //row class
      );//endrow
      return theme('table', $header, $rows, array('class' => 'time_tracker_entry_comment'));
    }
    else {
      $time = 'on ' . date("F d, Y", $time_entry->timestamp);
      $rows[] = array(t('Time: !duration !activity on !time', array(
        '!duration' => format_hours_to_hours_and_minutes($time_entry->duration),
        '!time' => format_date($time_entry->timestamp, 'custom', 'F d, Y'),
        '!activity' => $activity,
      )));

      return theme('table', NULL, $rows, array('class' => 'time_tracker_entry_comment'));
    }
  }
}

/**
 * Theme function for the time tracker entry summary.
 * 
 * @param $total_time
 *    Amount of time in hours
 * 
 * @return
 *    A themed table of summary data
 */
function theme_time_tracker_summary($total_time) {
  $rows = array();

  if ($total_time > 0) {
    $rows[] = array(t('Time logged: ') . '<span class="time_tracker_time">' .
                    format_hours_to_hours_and_minutes($total_time, TRUE) . '</span>');
  }

  return theme('table', NULL, $rows, array('class' => 'time_tracker_summary'));
}

/**
 * Theme function for case_tracker projects.
 * 
 * NOT IN USE RIGHT NOW!
 * 
 * @param $total_time
 *    Amount of time in hours
 * 
 * @return
 *    A themed table of summary data
 */
function theme_time_tracker_project_summary($total_time) {
  // COPY OF theme_time_tracker_summary() ...
}


/**
 * Preprocess function that will tell the template file whether or not
 * to show the comment
 * 
 * The $hide variable is already in the template file (comment.tpl.php)
 * it's just not being used right now by any other modules... so let's use it!
 */
function time_tracker_preprocess_comment(&$vars) {
  $comment = $vars['comment'];
  if ($comment->status == 2 && variable_get('hide_comments', 0) && !user_access('view time tracker entries')) {
    $vars['hide'] = TRUE;
  }
}


/***********************************************************************
 * HELPER FUNCTIONS -- Public
 ***********************************************************************/

/**
 * Formats hours (e.g. 4.5 hours) into an hours and minutes string
 * 
 * @param $hours
 *    The amount of time to format in hours
 * 
 * @param $abbrev_hrs
 *    Optional parameter to abbreviate the text for 'hours' to 'hrs'
 *    Default is set to un-abbreviated
 * 
 * @param $abbrev_mins
 *    Optional parameter to abbreviate the text for 'minutes' to 'mins'
 *    Default is set to abbreviated
 * 
 * @param $sep
 *    Optional separator for the hours and minutes. Default is ', '
 *    e.g. 10 hours, 30 minutes
 */
function format_hours_to_hours_and_minutes($hours, $abbrev_hrs = FALSE, $abbrev_mins = TRUE, $sep = ', ') {
    $hrs = floor($hours);
    $mins = round(($hours - $hrs) * 60);
    // Format the 'hours' text
    if ($abbrev_hrs == TRUE) {
      $hours_str = format_plural($hrs, '1 hr', '@count hrs');
    }
    else {
      $hours_str = format_plural($hrs, '1 hour', '@count hours');
    }
    // Don't show minutes if there are none
    if ($mins == 0) {
      return $hours_str;
    }
    else { 
      if ($abbrev_mins == TRUE) {
        $minutes_str = format_plural($mins, '1 min', '@count mins');
      }
      else {
        $minutes_str = format_plural($mins, '1 minute', '@count minute');
      }
      if ($hrs == 0) {
        return $minutes_str;
      }
      else {
        return $hours_str . ', ' . $minutes_str;
      }
    }
}

/**
 * A function to calculate the difference between a start time
 * and a stop time and return a duration in the hh:mm format
 */
function convert_phptime_to_duration($start, $stop = 0) {
  if ($stop == 0) {
    $duration = $start;
  }
  else {
    $duration = $stop - $start;
  }
  // floor() = Always round down
  if ($duration >= 3600) {
    $hours = sprintf('%02d', floor($duration / 3600));
    $mins = sprintf('%02d', floor(($duration % 3600) / 60));
    return $hours . ":" . $mins;
  } else {
    $mins = sprintf('%02d', ($duration/60));
    return '00:' . $mins;
  }
}

/**
 * Helper function to get the active activities
 * Formatted as a options list array for a select form element
 */
function get_active_activities_options() {
  $activities = array();
  $activities[] = '';
  $results = db_query("SELECT * FROM {time_tracker_activity} WHERE status = 1 ORDER BY weight ASC");
  while ($result = db_fetch_object($results)) {
    $activities[$result->taid] = $result->name;
  }
  return $activities;
}


/**
 * Helper function for turning activity id into name.
 */
function get_activity_name($activity_id) {
  $result = db_query("SELECT name FROM {time_tracker_activity} WHERE taid = '". $activity_id ."'");
  $activity = db_fetch_object($result);

  return $activity->name;
}

/**
 * Returns true if either we are tracking time on the case
 * either on the comments or the node
 * 
 * @param $node_type
 *    The node type to check if we are tracking time on it
 * 
 * @return
 *    Returns FALSE if we're not tracking time on this node
 *    type, otherwise returns a string of either 'both' 'node'
 *    or 'comment'
 */
function time_tracker_is_tracking_time($node_type) {
  $tracking = FALSE;
  if (variable_get('time_tracker_nodes_' . $node_type, 0) && variable_get('time_tracker_comments_' . $node_type, 0)) {
    $tracking = 'both';
  }
  elseif (variable_get('time_tracker_nodes_' . $node_type, 0)) {
    $tracking = 'node';
  }
  elseif (variable_get('time_tracker_comments_' . $node_type, 0)) {
    $tracking = 'comment';
  }
  return $tracking;
}

/***********************************************************************
 * HELPER FUNCTIONS -- Private
 ***********************************************************************/

/**
 * Utility function that parses a duration string and converts it to fractional
 * hours.
 *
 * Durations can be specified as:
 *  * fractions: 1.25 = 1 hour, 15 minutes, or
 *  * clock times: 1:15 = 1 hour, 15 minutes
 *
 * @param string $input
 *  The user-entered duration value.
 * @param integer $nearest
 *  Round time to the nearest fraction. Pass 0 to not round (default).
 * @return mixed
 *  Returns a time fraction, or FALSE if it could not parse the input.
 */
function _time_tracker_parse_duration($input, $nearest = 0) {
  $input = (string)$input;

  if (!strlen($input)) {
    return 0;
  } elseif (preg_match('/^(\d+)?:(\d+)$/', $input, $matches)) {
    list(, $hours, $minutes) = $matches;
    $hours += $minutes / 60;
  } elseif (preg_match('/^\d+(?:\.\d+)?$/', $input, $matches)) {
    $hours = $matches[0];
  } else {
    return FALSE;
  }

  if ($nearest) {
    $hours = round($hours / $nearest) * $nearest;
  }

  return $hours;
}



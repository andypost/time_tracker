<?php
// $Id$

/**
 * @file
 * Enables time tracking on nodes and comments.
 */

/*
  The default date format for displaying dates and times
*/
define('TIME_TRACKER_DEFAULT_DATE_FORMAT', 'Y-m-d h:i A');


// TODO: Abstract the time_entry_form and make it themeable.

/**
 * Implementation of hook_perm().
 */
function time_tracker_perm() {
  return array('administer time tracker', 'add time tracker entries', 'view time tracker entries', 'administer time entries');
}

/**
 * Implementation of hook_menu().
 *
 */
function time_tracker_menu() {
  $items = array();

  $items['admin/settings/time_tracker'] = array(
    'title' => 'Time Tracker',
    'description' => 'Adjust time tracker settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_settings_form'),
    'access arguments' => array('administer time tracker'),
  );
  $items['admin/settings/time_tracker/settings'] = array(
    'title' => 'Time Tracker',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/time_tracker/activity/list'] = array(
    'title' => 'Activities',
    'description' => 'Adjust time tracker settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_activity_table_form'),
    'access arguments' => array('administer time tracker'),
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/settings/time_tracker',
  );
  $items['admin/settings/time_tracker/activity/add'] = array(
    'title' => 'Add Activity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_activity_form'),
    'access arguments' => array('administer time tracker'),
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/settings/time_tracker',
  );
  // $items['admin/settings/time_tracker/settings'] = array(
  //   'title' => 'Time Tracker Settings',
  //   'page callback' => 'drupal_get_form',
  //   'page arguments' => array('time_tracker_activity_form'),
  //   'access arguments' => array('administer time tracker'),
  //   'type' => MENU_LOCAL_TASK,
  //   'parent' => 'admin/settings/time_tracker',
  // );
  $items['admin/settings/time_tracker/activity/edit/%'] = array(
    'title' => 'Edit Activity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_activity_form', 5),
    'access arguments' => array('administer time tracker'),
  );
  $items['user/%user/time'] = array(
    'title' => 'Time',
    'description' => 'My Time',
    'page callback' => 'time_tracker_user_page',
    'page arguments' => array(1, 'user'),
    'access arguments' => array('view time tracker entries'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['reports/js'] = array(
    'page callback' => 'report_js',
    'access arguments' => array('view time tracker entries'),
    'file' => 'views/time_tracker.views.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function time_tracker_user_page($user) {
  $output = views_embed_view('time_tracker_user', 'default', $user->uid);

  return $output;
}

/**
 * Form builder function for time tracker settings.
 */
function time_tracker_settings_form(&$form_state) {
  
  // Warn the user about switching between time duration and time interval time entries
  $msg = 'Note that any entries that have been entered using the <em>duration</em> method will not have start and end times saved in the database. Switching from <em>duration</em> to <em>interval</em> will not retroactively create start and end times for past time entires.';
  
  $form = array();
  $form['time_tracker_settings']['time_entry_method'] = array(
    '#type' => 'radios',
    '#title' => t('Time Tracker Time Entry Method'),
    '#default_value' => variable_get('time_entry_method', 'duration'),
    '#options' => array(
      'duration' => t('Duration'), 
      'interval' => t('Time Interval (Start and End Times)')
    ),
  );
  $form['time_tracker_settings']['time_entry_message'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="description">',
    '#suffix' => '</div>',
    '#value' => $msg,
  );
  // ** Not just yet. Needs to have AHAH switcher based on time_entry_method
  // $form['time_tracker_settings']['date_format'] = array(
  //   '#type' => 'select',
  //   '#title' => t('Date Format'),
  //   '#default_value' => variable_get('date_format', $TIME_TRACKER_DEFAULT_DATE_FORMAT),
  //   '#options' => array(
  //     'Y-m-d h:i A' => 'yyyy-mm-dd hh:mm AM/PM (e.g. ' . date('Y-m-d h:i A') . ')',
  //     'F d, Y h:i A' => 'month dd, yyyy hh:mm AM/PM (e.g. ' . date('F d, Y h:i A') . ')',
  //   ),
  // );
  return system_settings_form($form);
  
}

/*
  BEGIN TIME TRACKER ACTIVITY CONFIG
*/

/**
 * Theme the activity table as a sortable list of activities.
 *
 * @ingroup themeable
 * @see time_tracker_activity_table()
 */
function theme_time_tracker_activity_table($form) {
  $header = array(t('Activity Name'), t('Operations'), t('Weight'));
  drupal_add_tabledrag('activity-table', 'order', 'sibling', 'activity-weight');

  foreach (element_children($form) as $key) {
    if (isset($form[$key]['name'])) {
      // Add class to group weight fields for drag and drop.
      $form[$key]['weight']['#attributes']['class'] = 'activity-weight';

      $row = array();
      $row[] = drupal_render($form[$key]['name']);
      $row[] = drupal_render($form[$key]['edit']);
      $row[] = drupal_render($form[$key]['weight']);
      $rows[] = array('data' => $row, 'class' => 'draggable');
    }
  }
  $output = theme('table', $header, $rows, array('id' => 'activity-table'));
  $output .= drupal_render($form);
  return $output;
}

function time_tracker_activity_table_form() {
  $results = db_query('SELECT * FROM {time_tracker_activity} ORDER BY weight ASC');
  while ($result = db_fetch_object($results)) {
    $activities[$result->taid] = $result;
  }

  $form = array(
    '#tree' => TRUE,
    '#theme' => 'time_tracker_activity_table'
  );

  if (count($activities) > 0) {
    foreach ($activities as $activity) {
      $form[$activity->taid]['#activity'] = (array)$activity;
      $form[$activity->taid]['name'] = array('#value' => check_plain($activity->name));
      $form[$activity->taid]['weight'] = array('#type' => 'weight', '#delta' => 10, '#default_value' => $activity->weight);
      $form[$activity->taid]['edit'] = array('#value' => l(t('edit'), "admin/settings/time_tracker/activity/edit/$activity->taid"));
    }

    $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  }
  elseif (isset($activity)) {
    unset($form[$activity->taid]['weight']);
  }
  return $form;
}

/**
 * Time tracker settings form submit handler.
 *
 * @param $form
 * @param $form_state
 */
function time_tracker_settings_form_submit($form, &$form_state) {
  foreach ($form_state['values'] as $taid => $activity) {
    if (is_numeric($taid) && $form[$taid]['#activity']['weight'] != $form_state['values'][$taid]['weight']) {
      $form[$taid]['#activity']['taid'] = $taid;
      $form[$taid]['#activity']['weight'] = $form['#post'][$taid]['weight'];
      drupal_write_record('time_tracker_activity', $form[$taid]['#activity'], array('taid'));
    }
  }
}

/**
 * Form builder function for module time tracker activities.
 */
function time_tracker_activity_form(&$form_state, $taid = NULL) {

  $form['#redirect'] = 'admin/settings/time_tracker/list';

  if ($taid) {
    $activity = db_fetch_object(db_query("SELECT * FROM {time_tracker_activity} WHERE taid = " . $taid));

    $form['time_tracker_activity']['taid'] = array(
      '#type' => 'value',
      '#default_value' => $activity->taid,
    );
  }

  $form['time_tracker_activity']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Activity'),
    '#size' => 30,
    '#description' => t('Add an activity that time can be tracked for.'),
    '#default_value' => $activity->name,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  if ($taid) {
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('time_tracker_activity_delete'),
    );
  }

  return $form;
}

/**
 * Time tracker activity form submit handler.
 *
 * @param $form
 * @param $form_state
 */
function time_tracker_activity_form_submit($form, &$form_state) {
  if (isset($form_state['values']['taid'])) {
    drupal_set_message('Activity Updated');
    return drupal_write_record('time_tracker_activity', $form_state['values'], array('taid'));
  }
  else {
    drupal_set_message('Activity Added');
    return drupal_write_record('time_tracker_activity', $form_state['values']);
  }
}

/**
 * Function for deleting time tracker activity entries.
 */
function time_tracker_activity_delete($form, &$form_state) {
  db_query('DELETE FROM {time_tracker_activity} WHERE taid = ' . $form_state['values']['taid']);
  drupal_set_message(t('Activity <em>' . $form_state['values']['name'] . '</em> Deleted'));

  drupal_goto('admin/settings/time_tracker');
}

/*
  END TIME TRACKER ACTIVITY CONFIG
*/



/**
 * Implementation of hook_form_alter().
 *
 */
function time_tracker_form_alter(&$form, $form_state, $form_id) {
  // what are we tracking time on?
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    $form['time_tracker'] = array(
      '#type' => 'fieldset',
      '#title' => t('Time Tracker settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['time_tracker']['time_tracker_nodes'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track time on this content types nodes'),
      '#default_value' => variable_get('time_tracker_nodes_' . $form['#node_type']->type, 0),
      '#description' => t('Track time on this content types nodes.'),
    );
    $form['time_tracker']['time_tracker_comments'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track time on this content types comments'),
      '#default_value' => variable_get('time_tracker_comments_' . $form['#node_type']->type, 0),
      '#description' => t('Track time on this content types comments.'),
    );
  }

  // if this is a comment form and we're tracking time on it.
  if ($form_id == 'comment_form' && user_access('add time tracker entries')) {

    $node = node_load($form['nid']['#value']);

    if (variable_get('time_tracker_comments_' . $node->type, 0)) {
      $form = array_merge($form, time_tracker_time_entry_form($form['cid']['#value']));
      //dpm($form);
    }
  }
  
}

/**
 * Implementation of hook_nodeapi().
 */
function time_tracker_nodeapi(&$node, $op) {
  switch ($op) {
    case 'view':
      if (module_exists('casetracker')) {
        if (casetracker_is_project($node->type)) {
          $case_results = db_query("SELECT * FROM {casetracker_case} WHERE pid = %d", $node->nid);
          
          while ($case = db_fetch_object($case_results)) {
            $time_results = db_query("SELECT * FROM {time_tracker_entry} WHERE nid = %d", $case->nid);

            while ($time = db_fetch_object($time_results)) {
              $total_time = $total_time + $time->duration;
            }
          }

          if($total_time > 0) {
            $el = module_exists('atrium_casetracker') ? 'time_tracker_summary' : 'casetracker_project_summary';
            $node->content[$el]['#value'] = $node->content[$el]['#value'] . theme('time_tracker_project_summary', $total_time);
          }
        }
        elseif (casetracker_is_case($node->type)) {
          $case_results = db_query("SELECT * FROM {time_tracker_entry} WHERE nid = %d", $node->nid);

          while ($case = db_fetch_object($case_results)) {
            $total_time = $total_time + $case->duration;
          }

          if ($total_time > 0) {
            $node->content['casetracker_case_summary']['#value'] = $node->content['casetracker_case_summary']['#value'] . theme('time_tracker_case_summary', $total_time);
          }
        }
      } else {
        // if this is a node form display the time tracker
      }

      // display the time tracking form for nodes here.
      if (variable_get('time_tracker_nodes_' . $node->type, 0)) {
        $node->content['time_tracker']['#value'] = drupal_get_form('time_tracker_time_entry_form');
      }
    break;
    
    case 'delete':
      // TODO: if a node is deleted, delete all time entries
      // this should also be done to comment time entries as well.
      if (module_exists('casetracker')) {
        // if (casetracker_is_project($node->type)) <-- Not needed! 
        // Ticket deletion is triggered on project delete and next block will delete time entries
        if (casetracker_is_case($node->type)) {
          db_query("DELETE FROM {time_tracker_entry} WHERE nid = %d", $node->nid);
        }
      }
    break;
    
    case 'insert':
    case 'update':
      
    break;
  }
}

/**
 * Defines the time entry form
 *
 * NOTE: This was a first step in refactoring this form into it's own function
 *
 * TODO: Refine this form so that it isn't specific only to comments
 */
function time_tracker_time_entry_form($cid = 0) {
  global $user;
  // Add Javascript to auto complete the duration field
  // For time interval entries
  drupal_add_js();
  $results = db_query("SELECT * FROM {time_tracker_activity}");

  $activities = array();
  $activities[] = '';
  $results = db_query("SELECT * FROM {time_tracker_activity} ORDER BY weight ASC");
  while ($result = db_fetch_object($results)) {
    $activities[$result->taid] = $result->name;
  }
  
  if ($cid) {
    $results = db_query("SELECT * FROM {time_tracker_entry} WHERE cid = %d", $cid);
    while ($result = db_fetch_object($results)) {
      $time_tracker_data = $result;
    }
  }
  $user_submit = user_load($time_tracker_data->uid);
  //dpm($time_tracker_data);
  $form['time_tracker'] = array(
    '#type' => 'fieldset',
    '#title' => 'Time Tracker',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -9,
  );

  $form['time_tracker']['nid'] = array();
  $form['time_tracker']['cid'] = array();
  $form['time_tracker']['teid'] = array(
    '#type' => 'value',
    '#value' => $time_tracker_data->teid,
  );

  $form['time_tracker']['uid'] = array(
    '#title' => t('User'),
    '#access' => user_access('administer time entries'),
    '#size' => '10',
    '#type' => 'textfield',
    '#default_value' => $user_submit->name ? $user_submit->name : $user->name,
    '#autocomplete_path' => 'user/autocomplete',
  );

  if (module_exists('jquery_ui')) {
    jquery_ui_add(array('ui.datepicker'));
    drupal_add_js(drupal_get_path('module', 'time_tracker') .'/js/datepicker.settings.js');
    drupal_add_css(drupal_get_path('module', 'jquery_ui') .'/jquery.ui/themes/default/ui.datepicker.css');
  }
  
  // Insert different form elements depending on the time_entry_method
  if (variable_get('time_entry_method', 'duration') == 'duration') {
    $form['time_tracker']['time_entry']['time'] = array(
      '#title' => t('Date'),
      '#type' => 'textfield',
      '#size' => '20',
      '#weight' => 0,
      '#default_value' => empty($time_tracker_data->timestamp) ? date("F d, Y", time()) : date("F d, Y", $time_tracker_data->timestamp),
    );
    $form['time_tracker']['time_entry']['duration'] = array(
      '#title' => t('Hours'),
      '#type' => 'textfield',
      '#size' => '10',
      '#weight' => 1,
      '#default_value' => $time_tracker_data->duration,
      '#description' => t('eg. 2.5 or 2:30 for two and a half hours'),
    );
  } 
  else { // Time entry method is 'interval'
    $format = TIME_TRACKER_DEFAULT_DATE_FORMAT; // This should be defined in settings...

    $form['time_tracker']['time_entry']['start'] = array(
      '#title' => t('Start'),
      '#type' => 'date_popup',
      '#default_value' => $time_tracker_data->start ? date($format, $time_tracker_data->start) : '',
      '#date_format' => $format,
      '#date_label_position' => 'within',
      '#weight' => 1,
    );
    $form['time_tracker']['time_entry']['end'] = array(
      '#title' => t('End'),
      '#type' => 'date_popup',
      '#default_value' => $time_tracker_data->end ? date($format, $time_tracker_data->end) : '',
      '#date_format' => $format,
      '#date_label_position' => 'within',
      '#weight' => 2,
    );
    //dpm($form);
    // If duration data exists already we post a note to the user
    if ($time_tracker_data->duration && !($time_tracker_data->end) && !($time_tracker_data->start)) {
      $form['time_tracker']['duration_msg'] = array(
        '#prefix' => '<div class="description"><em>',
        '#value' => "A duration value exists for this time entry, but no Start and End time. <br/>" .
                    "Saving this entry with a Start and End time will overwrite the duration<br/>" .
                    "Logged Duration: <b>" .
                    _time_tracker_hours_to_hours_and_minutes($time_tracker_data->duration) . '</b>',
        '#suffix' => '</em></div>',
        '#weight' => 3,
      );
    }
    /*
      Commenting this out for now. Who needs it really?
      It was supposed to just be some text that stated the duration
      calculated by some Javascript... but it's bit of work for now... Later...
    */
    // $form['time_tracker']['time_entry']['duration'] = array(
    //   '#type' => 'markup',
    //   '#prefix' => '<div class="time_tracker_duration description">',
    //   '#value' => 'Calculated Duration: ' . $time_tracker_data->duration,
    //   '#suffix' => '</div>',
    //   '#weight' => 3,
    // );
  }
  $form['time_tracker']['activity'] = array(
    '#title' => t('Activity'),
    '#type' => 'select',
    '#weight' => 5,
    '#options' => $activities,
    '#default_value' => $time_tracker_data->activity,
  );

  return $form;
}

/**
 * Implementation of hook_comment().
 * TODO: previews aren't showing any time_tracker data.
 */
function time_tracker_comment(&$comment, $op) {
  switch ($op) {
    case 'view':
      // If this is a preview we won't have a cid yet.
      if (empty($comment->cid)) {
        $time_tracker_data = (object)$comment->time_tracker;
        $node = node_load($comment->nid);
      }
      else {
        $results = db_query("SELECT * FROM {time_tracker_entry} WHERE cid = %d", $comment->cid);
        while ($result = db_fetch_object($results)) {
          $time_tracker_data = $result;
        }
      }

      $comment->comment = theme('time_tracker_comment_changes', $time_tracker_data) . $comment->comment;
    break;

    case 'validate':
      // Check First if we are tracking by duration or time interval
      if (variable_get('time_entry_method', 'duration') == 'duration') {
        if (strlen($comment['duration']) && _time_tracker_parse_duration($comment['duration']) === FALSE) {
          form_set_error('time_tracker][duration', t('Invalid duration value. You may enter time fractions such as 1.25 or hour and minute values such as 2:30.'));
        }
      }
      else {
        // What kind of entry in the date_popup field would make this error?
      }
      
    break;

    case 'insert':
    case 'update':
      // Check First if we are tracking by duration or time interval
      if (variable_get('time_entry_method', 'duration') == 'duration') {
        if (strlen($comment['duration'])) {
          $duration = _time_tracker_parse_duration($comment['duration']);
          if ($duration > 0) {
            $comment['duration'] = $duration;
            $comment['timestamp'] = strtotime($comment['time']);
            unset($comment['time']);

            if (isset($comment['casetracker'])) {
              $comment['pid'] = $comment['casetracker']['pid'];
            }

            return drupal_write_record('time_tracker_entry', $comment, $comment['teid'] ? 'teid' : array());
          } elseif ($comment['teid']) {
            // No duration, but there WAS duration information -- someone wants
            // to remove the time entry!
            db_query("DELETE FROM {time_tracker_entry} WHERE teid = %d", $comment['teid']);
          }
        }
      }
      else {
        if (strlen($comment['start']) && strlen($comment['end'])) {
          $comment['start'] = strtotime($comment['start']);
          $comment['end'] = strtotime($comment['end']);
          //Do we make the duration into a timestamp now??
          $comment['duration'] = _time_tracker_parse_duration(convert_phptime_to_duration( $comment['start'], $comment['end']));
          //dpm($comment);
          if (isset($comment['casetracker'])) {
            $comment['pid'] = $comment['casetracker']['pid'];
          }
          return drupal_write_record('time_tracker_entry', $comment, $comment['teid'] ? 'teid' : array());
        }
      }
      
    break;

    case 'delete':
      db_query("DELETE FROM {time_tracker_entry} WHERE cid = %d", $comment->cid);
    break;
  }
}

/**
 * Implementation of hook_theme().
 */
function time_tracker_theme() {
  return array(
    'time_tracker_comment_changes' => array(),
    'time_tracker_project_summary' => array(),
    'time_tracker_case_summary' => array(),
    'time_tracker_activity_table' => array(
      'arguments' => array('form' => array()),
    ),
  );
}

/**
 * Theme function for time entries on comments.
 */
function theme_time_tracker_comment_changes($time_tracker_data) {
  if (is_object($time_tracker_data) && user_access('view time tracker entries')) {
    $rows = array();

    $rows[] = array(t('Time: '. format_plural($time_tracker_data->duration, '1 hour', '@count hours') .' (' . get_activity_name($time_tracker_data->activity) . ') on ' . date("F d, Y", $time_tracker_data->timestamp)));

    return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  }
}

/**
 * Theme function for case_tracker projects.
 */
function theme_time_tracker_project_summary($time_tracker) {
  if (user_access('view time tracker entries')) {
    $rows = array();

    if ($time_tracker > 0) {
      $rows[] = array(t('Time: ') . format_plural($time_tracker, '1 hour', '@count hours') . ' logged so far');
    }

    return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  }
}

/**
 * Theme function for case_tracker cases.
 */
function theme_time_tracker_case_summary($time_tracker) {
  if (user_access('view time tracker entries')) {
    $rows = array();

    if ($time_tracker > 0) {
      $rows[] = array(t('Time: ') . format_plural($time_tracker, '1 hour', '@count hours') . ' logged so far');
    }

    return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  }
}

/**
 * Helper function for turning activity id into name.
 */
function get_activity_name($activity_id) {
  $result = db_query("SELECT name FROM {time_tracker_activity} WHERE taid = '". $activity_id ."'");
  $activity = db_fetch_object($result);

  return $activity->name;
}

/**
 * Implementation of hook_views_api().
 */
function time_tracker_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'time_tracker') .'/views',
  );
}

/**
 * Utility function that parses a duration string and converts it to fractional
 * hours.
 *
 * Durations can be specified as:
 *  * fractions: 1.25 = 1 hour, 15 minutes, or
 *  * clock times: 1:15 = 1 hour, 15 minutes
 *
 * @param string $input
 *  The user-entered duration value.
 * @param integer $nearest
 *  Round time to the nearest fraction. Pass 0 to not round (default).
 * @return mixed
 *  Returns a time fraction, or FALSE if it could not parse the input.
 */
function _time_tracker_parse_duration($input, $nearest = 0) {
  $input = (string)$input;

  if (!strlen($input)) {
    return 0;
  } elseif (preg_match('/^(\d+)?:(\d+)$/', $input, $matches)) {
    list(, $hours, $minutes) = $matches;
    $hours += $minutes / 60;
  } elseif (preg_match('/^\d+(?:\.\d+)?$/', $input, $matches)) {
    $hours = $matches[0];
  } else {
    return FALSE;
  }

  if ($nearest) {
    $hours = round($hours / $nearest) * $nearest;
  }

  return $hours;
}

/**
 * Formats hours (e.g. 4.5 hours) into an hours and minutes string
 */
function _time_tracker_hours_to_hours_and_minutes($hours) {
    $hrs = floor($hours);
    $mins = ($hours - $hrs) * 60;
    if ($hrs = 1) {
      return $hrs . " hour, " . $mins . ' minutes';
    }else{
      return $hrs . " hours, " . $mins . ' minutes';
    }
}

/**
 * A function to calculate the difference between a start time
 * and a stop time and return a duration in the hh:mm format
 */
function convert_phptime_to_duration($start, $stop) {
  $duration = $stop - $start;
  // floor() = Always round down
  if ($duration >= 3600) {
    $hours = sprintf('%02d', floor($duration / 3600));
    $mins = sprintf('%02d', floor(($duration % 3600) / 60));
    return $hours . ":" . $mins;
  } else {
    $mins = sprintf('%02d', ($duration/60));
    return '00:' . $mins;
  }
}

/**
 * Adds default values to views filters
 */
// function time_tracker_form_alter(&$form, &$form_state) {
//   $form['new_item'] = array(
//     '#type' => 'markup',
//     '#value' => '<p>FunFunFun/p>',
//   );
//   
// }










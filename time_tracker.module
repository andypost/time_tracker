<?php
/**
 * @file
 * Enables time tracking on nodes and comments.
 */

/**
 * Implementation of hook_perm().
 */
function time_tracker_perm() {
  return array('administer time tracker');
}

/*
 * Implementation of hook_menu()
 * 
 */
function time_tracker_menu() {
	$items = array();
	$items['admin/settings/time_tracker'] = array(
    'title' => 'Time Tracker',
    'description' => 'Adjust time tracker settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_theme_settings'),
    'access arguments' => array('administer time tracker'),
	);
	
	return $items;
}

/**
 * Form builder function for module settings.
 */
function time_tracker_theme_settings() {
	$activities = array();
	
  $results = db_query("SELECT * FROM {time_tracker_activity}");
  
  while ($result = db_fetch_object($results)) {
    $activities[] = $result;
  }
  
  $form['time_tracker_activities_table'] = array(
    '#type' => 'markup',
  );
  
  $form['time_tracker_activities'] = array(
    '#type' => 'textfield',
    '#title' => t('Activities'),
    '#size' => 30,
    '#description' => t('Add activites that time can be tracked for'),
  );

  return $form;
}

/**
 * Implementation of hook_node_type().
 * TODO: What is thie even for?
 */
function time_node_type($op, $info) {
  $settings = array(
    'time_entry',
  );
  switch ($op) {
    case 'delete':
      foreach ($settings as $setting) {
        variable_del($setting .'_'. $info->type);
      }
      break;
  }
}

/*
 * Implementation of hook_form()
 * 
 */
function time_tracker_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    $form['time_tracker'] = array(
      '#type' => 'fieldset',
      '#title' => t('Time Tracking settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['time_tracker']['time_tracker_nodes'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track time on this content types nodes'),
      '#default_value' => variable_get('time_tracker_nodes_'. $form['#node_type']->type, 0),
      '#description' => t('Track time on this content types nodes.'),
    );     
    $form['time_tracker']['time_tracker_comments'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track time on this content types comments'),
      '#default_value' => variable_get('time_tracker_comments_'. $form['#node_type']->type, 0),
      '#description' => t('Track time on this content types comments.'),
    );   
  }
  
  if ($form_id == 'comment_form') {
    $node = node_load($form['nid']['#value']);
    
    if (variable_get('time_tracker_comments_'. $node->type, 0)) {
      global $user;
  
      $form['time_tracker']['teid'] = array( '#type' => 'value', '#value' => NULL );
      $form['time_tracker']['nid'] = array();
      $form['time_tracker']['cid'] = array();
      $form['time_tracker']['uid'] = array(
        '#title' => t('User'),
        '#access' => user_access('administer time entries'),
        '#size' => '10',
        '#type' => 'textfield',
        '#default_value' => $user->name,
        '#autocomplete_path' => 'user/autocomplete',
      );
      $form['time_tracker']['timestamp'] = array(
        '#title' => t('Date'),
        '#type' => 'textfield',
        '#size' => '20',
        '#default_value' => format_date(time(), 'small'),
      );
      $form['time_tracker']['note'] = array(
        '#title' => t('Note'),
        '#type' => 'textfield',
        '#size' => '50',
        '#default_value' => NULL,
      );
      $form['time_tracker']['duration'] = array(
        '#title' => t('Hours'),
        '#type' => 'textfield',
        '#size' => '10',
        '#default_value' => 0,
        '#description' => t('eg. 2.5 for two and a half hours'),
        '#required' => TRUE,
      );
      $form['time_tracker']['activity'] = array(
        '#title' => t('Activity'),
        '#type' => 'select',
        '#default_value' => NULL,
        '#options' => array('1', '2'),
      );

      $form['#validate'][] = 'time_tracker_form_validate';
      $form['#submit'][] = 'time_tracker_form_submit';

      return $form;
    }
  }  
}

/**
 * Validate handler for Time tracking form.
 * TODO: add some time_tracker validation
 */
function time_tracker_form_validate($form, &$form_state) {
  return TRUE;
}

/**
 * Saving the record here after validation up there.
 * TODO: change the array keys to reflect changes to the
 * form alter field names
 */
function time_tracker_form_submit($form, &$form_state) {	
	if(isset($form_state['values']['teid'])) {
		return drupal_write_record('time_tracker_entry', $form_state['values'], $form_state['values']['teid']);
	} else {
		return drupal_write_record('time_tracker_entry', $form_state['values']);
	}
}

/**
 * Implementation of hook_comment().
 */
function time_tracker_comment(&$comment, $op) {	
	switch ($op) {
	  case 'view':
      // If this is a preview we won't have a cid yet.
      if (empty($comment->cid)) {
        $time_tracker_data = (object)$comment->time_tracker;
        $node = node_load($comment->nid);
      }
      else {
        $results = db_query("SELECT * FROM {time_tracker_entry} WHERE cid = %d", $comment->cid);
        while ($result = db_fetch_object($results)) {
          $time_tracker_data = $result;
          print_r($time_tracker_data);
        }
      }
      $comment->comment = theme('time_tracker_comment_changes', $time_tracker_data) . $comment->comment;        
      break;
	}
}

/**
 * Implementation of hook_theme
 */
function time_tracker_theme() {
  return array(
    'time_tracker_comment_changes' => array(),
  );
}

/**
 * Theme function for time entries on comments.
 */
function theme_time_tracker_comment_changes($time_tracker_data) {
  $rows = array();

  $rows[] = array(t('Duration: '. $time_tracker_data->duration .' hours'));

  return theme('table', NULL, $rows, array('class' => 'time_tracker'));	
}

/**
 * Implementation of hook_views_api().
 */
function time_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'time_tracker') .'/includes/views',
  );
}
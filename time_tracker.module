<?php
// $Id$

/**
 * @file
 * Enables time tracking on comments.
 */

/**
 * Implementation of hook_perm().
 */
function time_tracker_perm() {
  return array('administer time tracker', 'add time tracker entries', 'view time tracker entries');
}

/**
 * Implementation of hook_menu().
 *
 */
function time_tracker_menu() {
  $items = array();
  $items['admin/settings/time_tracker'] = array(
    'title' => 'Time Tracker',
    'description' => 'Adjust time tracker settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_settings_form'),
    'access arguments' => array('administer time tracker'),
  );
  $items['admin/settings/time_tracker/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/time_tracker/activity/add'] = array(
    'title' => 'Add Activity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_activity_form'),
    'access arguments' => array('administer time tracker'),
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/settings/time_tracker',
  );
  $items['admin/settings/time_tracker/activity/edit/%'] = array(
    'title' => 'Edit Activity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_activity_form', 5),
    'access arguments' => array('administer time tracker'),
  );
  $items['user/%user/time'] = array(
    'title' => 'Time',
    'description' => 'My Time',
    'page callback' => 'time_tracker_user_page',
    'page arguments' => array(1, 'user'),
    'access arguments' => array('view time tracker entries'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['time_tracker/timer'] = array(
    'title' => 'Timer',
    'description' => 'Timer',
    'page callback' => 'time_tracker_timer',
    'access arguments' => array('view time tracker entries'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function time_tracker_user_page($user) {
  $output = views_embed_view('time_tracker_user', 'default', $user->uid);

  return $output;
}

/**
 * Form builder function for time tracker settings.
 */
function time_tracker_settings_form(&$form_state) {
  return time_tracker_activity_table_form();
}

/**
 * Theme the activity table as a sortable list of activities.
 *
 * @ingroup themeable
 * @see time_tracker_activity_table()
 */
function theme_time_tracker_activity_table($form) {
  $header = array(t('Activity Name'), t('Operations'), t('Weight'));
  drupal_add_tabledrag('activity-table', 'order', 'sibling', 'activity-weight');

  foreach (element_children($form) as $key) {
    if (isset($form[$key]['name'])) {
      // Add class to group weight fields for drag and drop.
      $form[$key]['weight']['#attributes']['class'] = 'activity-weight';

      $row = array();
      $row[] = drupal_render($form[$key]['name']);
      $row[] = drupal_render($form[$key]['edit']);
      $row[] = drupal_render($form[$key]['weight']);
      $rows[] = array('data' => $row, 'class' => 'draggable');
    }
  }
  $output = theme('table', $header, $rows, array('id' => 'activity-table'));
  $output .= drupal_render($form);
  return $output;
}

function time_tracker_activity_table_form() {
  $results = db_query('SELECT * FROM {time_tracker_activity} ORDER BY weight ASC');
  while ($result = db_fetch_object($results)) {
    $activities[$result->taid] = $result;
  }

  $form = array(
    '#tree' => TRUE,
    '#theme' => 'time_tracker_activity_table'
  );

  foreach ($activities as $activity) {
    $form[$activity->taid]['#activity'] = (array)$activity;
    $form[$activity->taid]['name'] = array('#value' => check_plain($activity->name));
    $form[$activity->taid]['weight'] = array('#type' => 'weight', '#delta' => 10, '#default_value' => $activity->weight);
    $form[$activity->taid]['edit'] = array('#value' => l(t('edit'), "admin/settings/time_tracker/activity/edit/$activity->taid"));
  }

  if (count($activities) > 1) {
    $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  }
  elseif (isset($activity)) {
    unset($form[$activity->taid]['weight']);
  }
  return $form;
}

function time_tracker_settings_form_submit($form, &$form_state) {
  foreach ($form_state['values'] as $taid => $activity) {
    if (is_numeric($taid) && $form[$taid]['#activity']['weight'] != $form_state['values'][$taid]['weight']) {
      $form[$taid]['#activity']['taid'] = $taid;
      $form[$taid]['#activity']['weight'] = $form['#post'][$taid]['weight'];
      drupal_write_record('time_tracker_activity', $form[$taid]['#activity'], array('taid'));
    }
  }
}

/**
 * Form builder function for module time tracker activities.
 */
function time_tracker_activity_form(&$form_state, $taid = NULL) {
  $form['#redirect'] = 'admin/settings/time_tracker/list';

  if($taid) {
    $activity = db_fetch_object(db_query("SELECT * FROM {time_tracker_activity} WHERE taid = ".$taid));

    $form['time_tracker_activity']['taid'] = array(
      '#type' => 'value',
      '#default_value' => $activity->taid,
    );
  }

  $form['time_tracker_activity']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Activity'),
    '#size' => 30,
    '#description' => t('Add an activity that time can be tracked for.'),
    '#default_value' => $activity->name,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  if($taid) {
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('time_tracker_activity_delete'),
    );
  }

  return $form;
}

function time_tracker_activity_form_submit($form, &$form_state) {
  if (isset($form_state['values']['taid'])) {
    drupal_set_message('Activity Updated');
    return drupal_write_record('time_tracker_activity', $form_state['values'], array('taid'));
  }
  else {
    drupal_set_message('Activity Added');
    return drupal_write_record('time_tracker_activity', $form_state['values']);
  }
}

/**
 * Function for deleting time tracker activity entries.
 */
function time_tracker_activity_delete($form, &$form_state) {
  db_query('DELETE FROM {time_tracker_activity} WHERE taid = '.$form_state['values']['taid']);
  drupal_set_message(t('Activity <em>'. $form_state['values']['name'] .'</em> Deleted'));

  drupal_goto('admin/settings/time_tracker');
}

/**
 * Implementation of something_something_form().
 *
 * Apply time tracker to a node or a nodes comments.
 */
// TODO: this function

/**
 * Implementation of hook_form().
 *
 */
function time_tracker_form_alter(&$form, $form_state, $form_id) {
  // what are we tracking time on?
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    $form['time_tracker'] = array(
      '#type' => 'fieldset',
      '#title' => t('Time Tracker settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['time_tracker']['time_tracker_comments'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track time on this content types comments'),
      '#default_value' => variable_get('time_tracker_comments_'. $form['#node_type']->type, 0),
      '#description' => t('Track time on this content types comments.'),
    );
  }

  // if this is a comment form and we're tracking time on it.
  if ($form_id == 'comment_form' && user_access('add time tracker entries')) {

    $node = node_load($form['nid']['#value']);

    if (variable_get('time_tracker_comments_'. $node->type, 0)) {
      global $user;

      $results = db_query("SELECT * FROM {time_tracker_activity}");

      $activities = array();
      $results = db_query("SELECT * FROM {time_tracker_activity} ORDER BY weight ASC");
      while ($result = db_fetch_object($results)) {
        $activities[$result->taid] = $result->name;
      }

      if ($form['cid']['#value']) {
        $results = db_query("SELECT * FROM {time_tracker_entry} WHERE cid = %d", $form['cid']['#value']);
        while ($result = db_fetch_object($results)) {
          $time_tracker_data = $result;
        }
      }

      $user_submit = user_load($time_tracker_data->uid);

      $form['time_tracker'] = array(
        '#type' => 'fieldset',
        '#title' => 'Time Tracker',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#weight' => -9,
      );
      $form['time_tracker']['nid'] = array();
      $form['time_tracker']['cid'] = array();
      $form['time_tracker']['teid'] = array(
        '#type' => 'value',
        '#default_value' => $time_tracker_data->teid,
      );

      $form['time_tracker']['uid'] = array(
        '#title' => t('User'),
        '#access' => user_access('administer time entries'),
        '#size' => '10',
        '#type' => 'textfield',
        '#default_value' => $user_submit->name ? $user_submit->name : $user->name,
        '#autocomplete_path' => 'user/autocomplete',
      );

      if(module_exists('jquery_ui')) {
        jquery_ui_add(array('ui.datepicker'));
        drupal_add_js(drupal_get_path('module', 'time_tracker') .'/js/datepicker.settings.js');
        drupal_add_css(drupal_get_path('module', 'jquery_ui') .'/jquery.ui/themes/default/ui.datepicker.css');
      }

      $form['time_tracker']['time'] = array(
        '#title' => t('Date'),
        '#type' => 'textfield',
        '#size' => '20',
        '#default_value' => empty($time_tracker_data->timestamp) ? date("F d, Y", time()) : date("F d, Y", $time_tracker_data->timestamp),
      );
      $form['time_tracker']['duration'] = array(
        '#title' => t('Hours'),
        '#type' => 'textfield',
        '#size' => '10',
        '#default_value' => $time_tracker_data->duration,
        '#description' => t('eg. 2.5 or 2:30 for two and a half hours'),
        '#suffix' => l('Timer', 'time_tracker/timer'),
      );
      $form['time_tracker']['activity'] = array(
        '#title' => t('Activity'),
        '#type' => 'select',
        '#default_value' => $time_tracker_data->activity,
        '#options' => $activities,
      );
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function time_tracker_nodeapi(&$node, $op) {
  switch ($op) {
    case 'view':
      if (casetracker_is_project($node->type)) {
        $project_results = db_query("SELECT * FROM {node} WHERE type = %d", $node->type);

        while ($project = db_fetch_object($project_results)) {
          $case_results = db_query("SELECT * FROM {time_tracker_entry} WHERE nid = %d", $project->nid);

          while ($case = db_fetch_object($case_results)) {
            $total_time = $total_time + $case->duration;
          }
        }

        $el = module_exists('atrium_casetracker') ? 'time_tracker_summary' : 'casetracker_project_summary';
        $node->content[$el]['#value'] = $node->content[$el]['#value'] . theme('time_tracker_project_summary', $total_time);
      }
      elseif (casetracker_is_case($node->type)) {
        $case_results = db_query("SELECT * FROM {time_tracker_entry} WHERE nid = %d", $node->nid);

        while ($case = db_fetch_object($case_results)) {
          $total_time = $total_time + $case->duration;
        }

        $node->content['casetracker_case_summary']['#value'] = $node->content['casetracker_case_summary']['#value'] . theme('time_tracker_case_summary', $total_time);
      }
    break;
  }
}

/**
 * Implementation of hook_comment().
 * TODO: previews aren't showing any time_tracker data.
 */
function time_tracker_comment(&$comment, $op) {
  switch ($op) {
    case 'view':
      // If this is a preview we won't have a cid yet.
      if (empty($comment->cid)) {
        $time_tracker_data = (object)$comment->time_tracker;
        $node = node_load($comment->nid);
      }
      else {
        $results = db_query("SELECT * FROM {time_tracker_entry} WHERE cid = %d", $comment->cid);
        while ($result = db_fetch_object($results)) {
          $time_tracker_data = $result;
        }
      }
      $comment->comment = theme('time_tracker_comment_changes', $time_tracker_data) . $comment->comment;
    break;

    case 'validate':
      if (strlen($comment['duration']) && _time_tracker_parse_duration($comment['duration']) === FALSE) {
        form_set_error('time_tracker][duration', t('Invalid duration value. You may enter time fractions such as 1.25 or hour and minute values such as 2:30.'));
      }
    break;

    case 'insert':
    case 'update':
      if (strlen($comment['duration'])) {
        $duration = _time_tracker_parse_duration($comment['duration']);
        if ($duration > 0) {
          $comment['duration'] = $duration;
          $comment['timestamp'] = strtotime($comment['time']);
          unset($comment['time']);

          if (isset($comment['casetracker'])) {
            $comment['pid'] = $comment['casetracker']['pid'];
          }

          return drupal_write_record('time_tracker_entry', $comment, $comment['teid'] ? 'teid' : array());
        } elseif ($comment['teid']) {
          // No duration, but there WAS duration information -- someone wants
          // to remove the time entry!
          db_query("DELETE FROM {time_tracker_entry} WHERE teid = %d", $comment['teid']);
        }
      }
    break;

    case 'delete':
      db_query("DELETE FROM {time_tracker_entry} WHERE cid = %d", $comment->cid);
    break;
  }
}

/**
 * Implementation of hook_theme().
 */
function time_tracker_theme() {
  return array(
    'time_tracker_comment_changes' => array(),
    'time_tracker_project_summary' => array(),
    'time_tracker_case_summary' => array(),
    'time_tracker_activity_table' => array(
      'arguments' => array('form' => array()),
    ),
  );
}

/**
 * Theme function for time entries on comments.
 */
function theme_time_tracker_comment_changes($time_tracker_data) {
  if (is_object($time_tracker_data) && user_access('view time tracker entries')) {
    $rows = array();

    $rows[] = array(t('Time: '. format_plural($time_tracker_data->duration, '1 hour', '@count hours') .' (' . get_activity_name($time_tracker_data->activity) . ') on ' . date("F d, Y", $time_tracker_data->timestamp)));

    return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  }
}

/**
 * Theme function for case_tracker projects.
 */
function theme_time_tracker_project_summary($time_tracker) {
  if (user_access('view time tracker entries')) {
    $rows = array();

    if ($time_tracker > 0) {
      $rows[] = array(t('Time: ') . format_plural($time_tracker, '1 hour', '@count hours') . ' logged so far');
    }

    return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  }
}

/**
 * Theme function for case_tracker cases.
 */
function theme_time_tracker_case_summary($time_tracker) {
  if (user_access('view time tracker entries')) {
    $rows = array();

    if ($time_tracker > 0) {
      $rows[] = array(t('Time: ') . format_plural($time_tracker, '1 hour', '@count hours') . ' logged so far');
    }

    return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  }
}

function time_tracker_timer() {
  return theme('time_tracker_timer', drupal_get_form('time_tracker_timer_form'));
}

function time_tracker_preprocess_page(&$vars) {
  $vars['links'] = NULL;
}

function time_tracker_timer_form($form) {
  // TODO: somehow use drupal_get_form
  $activities = array('' => 'Select an activity');
  $results = db_query("SELECT * FROM {time_tracker_activity} ORDER BY weight ASC");
  while ($result = db_fetch_object($results)) {
    $activities[$result->taid] = $result->name;
  }

  $form['time_tracker']['duration'] = array(
    '#title' => t('Hours'),
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => $time_tracker_data->duration,
    '#description' => t('eg. 2.5 for two and a half hours'),
  );
  $form['time_tracker']['activity'] = array(
    '#title' => t('Activity'),
    '#type' => 'select',
    '#default_value' => $time_tracker_data->activity,
    '#options' => $activities,
  );

  $form['time_tracker']['comment'] = array(
    '#title' => 'Comment',
    '#type' => 'textarea',
    '#required' => TRUE,
    '#weight' => 98,
  );

  $form['time_tracker']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 99,
  );

  return $form;
}

/**
 * Helper function for turning activity id into name.
 */
function get_activity_name($activity_id) {
  $result = db_query("SELECT name FROM {time_tracker_activity} WHERE taid = '". $activity_id ."'");
  $activity = db_fetch_object($result);

  return $activity->name;
}

/**
 * Implementation of hook_views_api().
 */
function time_tracker_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'time_tracker') .'/views',
  );
}
/**
 * Utility function that parses a duration string and converts it to fractional
 * hours.
 *
 * Durations can be specified as:
 *  * fractions: 1.25 = 1 hour, 15 minutes, or
 *  * clock times: 1:15 = 1 hour, 15 minutes
 *
 * @param string $input
 *  The user-entered duration value.
 * @param integer $nearest
 *  Round time to the nearest fraction. Pass 0 to not round (default).
 * @return mixed
 *  Returns a time fraction, or FALSE if it could not parse the input.
 */
function _time_tracker_parse_duration($input, $nearest = 0) {
  $input = (string)$input;

  if (!strlen($input)) {
    return 0;
  } elseif (preg_match('/^(\d+)?:(\d+)$/', $input, $matches)) {
    list(, $hours, $minutes) = $matches;
    $hours += $minutes / 60;
  } elseif (preg_match('/^\d+(?:\.\d+)?$/', $input, $matches)) {
    $hours = $matches[0];
  } else {
    return FALSE;
  }

  if ($nearest) {
    $hours = round($hours / $nearest) * $nearest;
  }

  return $hours;
}
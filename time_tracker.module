<?php
/**
 * @file
 * Enables time tracking on comments.
 */

/**
 * Implementation of hook_perm().
 */
function time_tracker_perm() {
  return array('administer time tracker', 'view time tracker entries');
}

/*
 * Implementation of hook_menu().
 *
 */
function time_tracker_menu() {
  $items = array();
  $items['admin/settings/time_tracker'] = array(
    'title' => 'Time Tracker',
    'description' => 'Adjust time tracker settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_settings_form'),
    'access arguments' => array('administer time tracker'),
  );
  $items['admin/settings/time_tracker/edit/%'] = array(
  );
  $items['admin/settings/time_tracker/delete/%'] = array(
  );

  return $items;
}

/**
 * Form builder function for module settings.
 */
function time_tracker_settings_form(&$form_state) {
  $header = array(t('Activity Name'), t('Operations'));

  $results = db_query("SELECT * FROM {time_tracker_activity} ORDER BY weight ASC");
  while ($result = db_fetch_object($results)) {
    $row[] = array(
      $result->name,
      l('edit', 'admin/settings/time_tracker/activity/edit'),
    );
  }

  $form['time_tracker_activity']['taid'] = array('#type' => 'value', '#value' => NULL);

  $form['time_tracker_activity'] = array(
    '#type' => 'markup',
    '#value' => theme('table', $header, $row, array('id' => 'activities-table')),
    '#weight' => -100,
  );

  $form['time_tracker_activity']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Activity'),
    '#size' => 30,
    '#description' => t('Add an activity that time can be tracked for.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );

  return $form;
}

function time_tracker_settings_form_submit($form, &$form_state) {
  if (isset($form_state['values']['taid'])) {
    return drupal_write_record('time_tracker_activity', $form_state['values'], $form_state['values']['taid']);
  }
  else{
    return drupal_write_record('time_tracker_activity', $form_state['values']);
  }
}

/**
 * Implementation of hook_node_type().
 * TODO: What is thie even for?
 */
function time_node_type($op, $info) {
  $settings = array(
    'time_entry',
  );
  switch ($op) {
    case 'delete':
      foreach ($settings as $setting) {
        variable_del($setting .'_'. $info->type);
      }
      break;
  }
}

/*
 * Implementation of hook_form().
 *
 */
function time_tracker_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    $form['time_tracker'] = array(
      '#type' => 'fieldset',
      '#title' => t('Time Tracker settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['time_tracker']['time_tracker_comments'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track time on this content types comments'),
      '#default_value' => variable_get('time_tracker_comments_'. $form['#node_type']->type, 0),
      '#description' => t('Track time on this content types comments.'),
    );
  }

  if ($form_id == 'comment_form') {
    $node = node_load($form['nid']['#value']);

    if (variable_get('time_tracker_comments_'. $node->type, 0)) {
      global $user;

      $results = db_query("SELECT * FROM time_tracker_activity");

      $activities = array();
      $results = db_query("SELECT * FROM {time_tracker_activity} ORDER BY weight ASC");
      while ($result = db_fetch_object($results)) {
        $activities[$result->taid] = $result->name;
      }

      if ($form['cid']['#value']) {
        $results = db_query("SELECT * FROM {time_tracker_entry} WHERE cid = %d", $form['cid']['#value']);
        while ($result = db_fetch_object($results)) {
          $time_tracker_data = $result;
        }
      }

      $form['time_tracker']['nid'] = array();
      $form['time_tracker']['cid'] = array();
      $form['time_tracker']['teid'] = array('#type' => 'value', '#value' => $time_tracker_data->teid);
      $form['time_tracker']['uid'] = array(
        '#title' => t('User'),
        '#access' => user_access('administer time entries'),
        '#size' => '10',
        '#type' => 'textfield',
        '#default_value' => $time_tracker_data->uid,
        '#autocomplete_path' => 'user/autocomplete',
      );
      $form['time_tracker']['timestamp'] = array(
        '#title' => t('Date'),
        '#type' => 'textfield',
        '#size' => '20',
        '#default_value' => isset($time_tracker_data->timestamp) ? format_date($time_tracker_data->timestamp, 'small') : format_date(time(), 'small'),
      );
      $form['time_tracker']['duration'] = array(
        '#title' => t('Hours'),
        '#type' => 'textfield',
        '#size' => '10',
        '#default_value' => $time_tracker_data->duration,
        '#description' => t('eg. 2.5 for two and a half hours'),
      );
      $form['time_tracker']['activity'] = array(
        '#title' => t('Activity'),
        '#type' => 'select',
        '#default_value' => $time_tracker_data->activity,
        '#options' => $activities,
      );

      return $form;
    }
  }
}

/**
 * Implementation of hook_comment().
 */
function time_tracker_comment(&$comment, $op) {
  switch ($op) {
    case 'view':
      // If this is a preview we won't have a cid yet.
      if (empty($comment->cid)) {
        $time_tracker_data = (object)$comment->time_tracker;
        $node = node_load($comment->nid);
      }
      else {
        $results = db_query("SELECT * FROM {time_tracker_entry} WHERE cid = %d", $comment->cid);
        while ($result = db_fetch_object($results)) {
          $time_tracker_data = $result;
        }
      }
      $comment->comment = theme('time_tracker_comment_changes', $time_tracker_data) . $comment->comment;
    break;

    case 'insert':
      if (isset($comment['duration']) && $comment['duration'] > 0) {
        return drupal_write_record('time_tracker_entry', $comment);
      }
    break;

    case 'update':
      if (isset($comment['teid'])) {
        return drupal_write_record('time_tracker_entry', $comment, 'teid');
      } else {
        return drupal_write_record('time_tracker_entry', $comment);
      }
    break;

    case 'delete':
      db_query("DELETE FROM {time_tracker_entry} WHERE cid = %d", $comment->cid);
    break;
  }
}

/**
 * Implementation of hook_theme().
 */
function time_tracker_theme() {
  return array(
    'time_tracker_comment_changes' => array(),
  );
}

/**
 * Theme function for time entries on comments.
 */
function theme_time_tracker_comment_changes($time_tracker_data) {
  if (is_object($time_tracker_data) && user_access('view time tracker entries')) {
    $rows = array();
    $rows[] = array(t('Time: '. $time_tracker_data->duration .' hours (' . get_activity_name($time_tracker_data->activity) . ')'));
    
    return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function time_tracker_nodeapi(&$node, $op) {
  switch ($op) {
    case 'view':
      
    break;
  }
}

/**
 * Helper function for turning activity id into name.
 */
function get_activity_name($activity_id) {
  $result = db_query("SELECT name FROM {time_tracker_activity} WHERE taid = '". $activity_id ."'");
  $activity = db_fetch_object($result);
  
  return $activity->name;
}

/**
 * Implementation of hook_views_api().
 */
function time_tracker_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'time_tracker') .'/views',
  );
}

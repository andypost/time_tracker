<?php
// $Id$

/**
 * @file
 * Enables time tracking on comments.
 */

/**
 * Implementation of hook_perm().
 */
function time_tracker_perm() {
  return array('administer time tracker', 'view time tracker entries');
}

/**
 * Implementation of hook_menu().
 *
 */
function time_tracker_menu() {
  $items = array();
  $items['admin/settings/time_tracker'] = array(
    'title' => 'Time Tracker',
    'description' => 'Adjust time tracker settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_settings_form'),
    'access arguments' => array('administer time tracker'),
  );
  $items['user/%user/time'] = array(
    'title' => 'Time',
    'description' => 'My Time',
    'page callback' => 'time_tracker_user_page',
    'page arguments' => array(1, 'user'),
    'access arguments' => array('view time tracker entries'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/time_tracker/activity/edit/%'] = array(
    'title' => 'Time Tracker',
    'page callback' => 'drupal_get_form',  
    'page arguments' => array('time_tracker_settings_form', 5),
    'access arguments' => array('administer time tracker'),
  );
  $items['admin/settings/time_tracker/activity/delete/%'] = array(
    'page callback' => 'time_tracker_activity_delete',
    'page arguments' => array(5),
    'access arguments' => array('administer time tracker'),
    'type' => MENU_LOCAL_TASK,  
  );
  return $items;
}

function time_tracker_user_page($user) {
  $output = views_embed_view('time_tracker_user', 'default', $user->uid);

  return $output;
}

/**
 * Function for deleting time tracker activity entries.
 */
function time_tracker_activity_delete($taid) {
	db_query('DELETE FROM {time_tracker_activity} WHERE taid = '.$taid);
	drupal_set_message('Activity Deleted');
	
	drupal_goto('admin/settings/time_tracker');
}

/**
 * Form builder function for module settings.
 */
function time_tracker_settings_form(&$form_state, $taid = NULL) {
  $header = array(t('Activity Name'), t('Operations'));

  $results = db_query("SELECT * FROM {time_tracker_activity} ORDER BY weight ASC");
  while ($result = db_fetch_object($results)) {
    $row[] = array(
      $result->name,
        l('edit', 'admin/settings/time_tracker/activity/edit/'.$result->taid)
          . ' / ' .
        l('delete', 'admin/settings/time_tracker/activity/delete/'.$result->taid),
    );
  }

  if($taid) {
    $activity = db_fetch_object(db_query("SELECT * FROM {time_tracker_activity} WHERE taid = ".$taid));
  }
  
  $form['time_tracker_activity'] = array(
    '#type' => 'markup',
    '#value' => theme('table', $header, $row, array('id' => 'activities-table')),
    '#weight' => -100,
  );

  $form['time_tracker_activity']['taid'] = array(
    '#type' => 'value',
    '#default_value' => $activity->taid
  );  
  
  $form['time_tracker_activity']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Activity'),
    '#size' => 30,
    '#description' => t('Add an activity that time can be tracked for.'),
    '#default_value' => $activity->name,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );

  return $form;
}

function time_tracker_settings_form_submit($form, &$form_state) {
  if (isset($form_state['values']['taid'])) {
    return drupal_write_record('time_tracker_activity', $form_state['values'], array('taid'));
  }
  else {
    return drupal_write_record('time_tracker_activity', $form_state['values']);
  }
}

/**
 * Implementation of hook_form().
 *
 */
function time_tracker_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'comment_form') {
    $node = node_load($form['nid']['#value']);

    global $user;

    $results = db_query("SELECT * FROM {time_tracker_activity}");

    $activities = array();
    $results = db_query("SELECT * FROM {time_tracker_activity} ORDER BY weight ASC");
    while ($result = db_fetch_object($results)) {
      $activities[$result->taid] = $result->name;
    }

    if ($form['cid']['#value']) {
      $results = db_query("SELECT * FROM {time_tracker_entry} WHERE cid = %d", $form['cid']['#value']);
      while ($result = db_fetch_object($results)) {
        $time_tracker_data = $result;
      }
    }

    $user_submit = user_load($time_tracker_data->uid);

    $form['time_tracker'] = array(
      '#type' => 'fieldset',
      '#title' => 'Time Tracker',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => -9,
    );
    $form['time_tracker']['nid'] = array();
    $form['time_tracker']['cid'] = array();
    $form['time_tracker']['teid'] = array('#type' => 'value', '#value' => $time_tracker_data->teid);

    $form['time_tracker']['uid'] = array(
      '#title' => t('User'),
      '#access' => user_access('administer time entries'),
      '#size' => '10',
      '#type' => 'textfield',
      '#default_value' => $user_submit->name,
      '#autocomplete_path' => 'user/autocomplete',
    );
    $form['time_tracker']['timestamp'] = array(
      '#title' => t('Date'),
      '#type' => 'textfield',
      '#size' => '20',
      '#default_value' => isset($time_tracker_data->timestamp) ? format_date($time_tracker_data->timestamp, 'small') : format_date(time(), 'small'),
    );
    $form['time_tracker']['duration'] = array(
      '#title' => t('Hours'),
      '#type' => 'textfield',
      '#size' => '10',
      '#default_value' => $time_tracker_data->duration,
      '#description' => t('eg. 2.5 for two and a half hours'),
    );
    $form['time_tracker']['activity'] = array(
      '#title' => t('Activity'),
      '#type' => 'select',
      '#default_value' => $time_tracker_data->activity,
      '#options' => $activities,
    );
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function time_tracker_nodeapi(&$node, $op) {
  switch ($op) {
    case 'view':
      if (casetracker_is_project($node->type)) {
        $project_results = db_query("SELECT * FROM {node} WHERE type = %d", $node->type);

        while ($project = db_fetch_object($project_results)) {
          $case_results = db_query("SELECT * FROM {time_tracker_entry} WHERE nid = %d", $project->nid);

          while ($case = db_fetch_object($case_results)) {
            $total_time = $total_time + $case->duration;
          }
        }

        $node->content['casetracker_project_summary']['#value'] = $node->content['casetracker_project_summary']['#value'] . theme('time_tracker_project_summary', $total_time);
      }
      elseif (casetracker_is_case($node->type)) {
        $case_results = db_query("SELECT * FROM {time_tracker_entry} WHERE nid = %d", $node->nid);

        while ($case = db_fetch_object($case_results)) {
          $total_time = $total_time + $case->duration;
        }

        $node->content['casetracker_case_summary']['#value'] = $node->content['casetracker_case_summary']['#value'] . theme('time_tracker_case_summary', $total_time);
      }
    break;
  }
}

/**
 * Implementation of hook_comment().
 * TODO: previews aren't showing any time_tracker data.
 */
function time_tracker_comment(&$comment, $op) {
  switch ($op) {
    case 'view':
      // If this is a preview we won't have a cid yet.
      if (empty($comment->cid)) {
        $time_tracker_data = (object)$comment->time_tracker;
        $node = node_load($comment->nid);
      }
      else {
        $results = db_query("SELECT * FROM {time_tracker_entry} WHERE cid = %d", $comment->cid);
        while ($result = db_fetch_object($results)) {
          $time_tracker_data = $result;
        }
      }
      $comment->comment = theme('time_tracker_comment_changes', $time_tracker_data) . $comment->comment;
    break;

    case 'insert':
      if (isset($comment['duration']) && $comment['duration'] > 0) {
        return drupal_write_record('time_tracker_entry', $comment);
      }
    break;

    case 'update':
      if (isset($comment['teid'])) {
        return drupal_write_record('time_tracker_entry', $comment, 'teid');
      }
      else {
        return drupal_write_record('time_tracker_entry', $comment);
      }
    break;

    case 'delete':
      db_query("DELETE FROM {time_tracker_entry} WHERE cid = %d", $comment->cid);
    break;
  }
}

/**
 * Implementation of hook_theme().
 */
function time_tracker_theme() {
  return array(
    'time_tracker_comment_changes' => array(),
    'time_tracker_project_summary' => array(),
    'time_tracker_case_summary' => array(),
  );
}

/**
 * Theme function for time entries on comments.
 */
function theme_time_tracker_comment_changes($time_tracker_data) {
  if (is_object($time_tracker_data) && user_access('view time tracker entries')) {
    $rows = array();

    $rows[] = array(t('Time: '. format_plural($time_tracker_data->duration, '1 hour', '@count hours') .' (' . get_activity_name($time_tracker_data->activity) . ')'));

    return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  }
}

/**
 * Theme function for case_tracker projects.
 */
function theme_time_tracker_project_summary($time_tracker) {
  if (user_access('view time tracker entries')) {
    $rows = array();

    if ($time_tracker > 0) {
      $rows[] = array(t('Time: ') . format_plural($time_tracker, '1 hour', '@count hours') . ' logged so far');
    }

    return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  }
}

/**
 * Theme function for case_tracker cases.
 */
function theme_time_tracker_case_summary($time_tracker) {
  if (user_access('view time tracker entries')) {
    $rows = array();

    if ($time_tracker > 0) {
      $rows[] = array(t('Time: ') . format_plural($time_tracker, '1 hour', '@count hours') . ' logged so far');
    }

    return theme('table', NULL, $rows, array('class' => 'time_tracker'));
  }
}

/**
 * Helper function for turning activity id into name.
 */
function get_activity_name($activity_id) {
  $result = db_query("SELECT name FROM {time_tracker_activity} WHERE taid = '". $activity_id ."'");
  $activity = db_fetch_object($result);

  return $activity->name;
}

/**
 * Implementation of hook_views_api().
 */
function time_tracker_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'time_tracker') .'/views',
  );
}
<?php
// $Id$

/**
 * @file
 * Enables time sheet entry for users.
 */

function time_sheet_init() {
  drupal_add_css(drupal_get_path('module', 'time_sheet') .'/css/time_sheet.css');
}

/**
 * Implementation of hook_perm().
 */
function time_sheet_perm() {
  return array('administer time sheet', 'view time sheet entries');
}

/*
 * Implementation of hook_menu().
 *
 * TODO: Add a menu item for admin settings.
 * TODO: Add a menu item for administrators to view finalized time sheet entries.
 */
function time_sheet_menu() {
  $items = array();
  $items['user/%user/time_sheet'] = array(
    'title' => 'Time Sheet',
    'description' => 'My Time Sheet',
    'page callback' => 'time_sheet_user_page',
    'page arguments' => array(1),
    'access arguments' => array('view time sheet entries'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['time_sheet/add_time'] = array(
    'page callback' => 'time_sheet_add_time',
    'access arguments' => array('view time sheet entries'),
    'type' => MENU_CALLBACK,
  );
  $items['time_sheet/ahah'] = array(
    'page callback' => 'time_sheet_ahah',
    'access arguments' => array('view time sheet entries'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}



/**
 * The users time sheet page callback.
 * @desc This callback displays a users time_sheet defaulting to the
 * current week.
 * @param $user
 *
 * TODO: Allow configurable week start and end points in admin interface.
 */
function time_sheet_user_page($user) {
  //Validates the user being passed in the path is a number
  if (is_numeric($user)) {
    $user = user_load($user);
  }
  //Get a start timestamp from the url parameters or set a default.
  if (!isset($_GET['start'])) {
    $start = time();
  } else {
    $start = $_GET['start'];
  }

  // Create the week array based on the $start value.
  $days = array('monday' => strtotime(date("Y\WW1", $start)),
                'tuesday' => strtotime(date("Y\WW2", $start)),
                'wednesday' => strtotime(date("Y\WW3", $start)),
                'thursday' => strtotime(date("Y\WW4", $start)),
                'friday' => strtotime(date("Y\WW5", $start)));

  // Determine the neighbouring weeks timestamps.
  $next_week = strtotime('+ 1 week', $days['monday']);
  $prev_week = strtotime('- 1 week', $days['monday']);

  // Output the week switcher.
  $output .= '<span class="time-sheet-header">';
  $output .= l(t('&laquo;'), $_GET['q'], array('query' => array('start' => $prev_week), 'html' => 'TRUE'));
  $output .= ' ' . date("l, M jS", $days['monday']) . ' - ' . date("l, M jS", $days['friday']) . ' ';
  $output .= l(t('&raquo;'), $_GET['q'], array('query' => array('start' => $next_week), 'html' => 'TRUE'));
  $output .= '</span>';


  // Loop through days of the week pulling time entries and generating a table.
  foreach ($days as $day => $stamp) {
    // The header displaying the date
    $header = array(array('data' => date("l, M jS Y", $stamp), 'colspan' => 2));
    // Rows Variable for later theme_table-ing
    $rows = array();
    // Get the all the time tracker entries for the date we're on
    $sql = "SELECT * FROM {time_tracker_entry} 
            WHERE uid = %d 
            AND timestamp BETWEEN %d AND %d  
            ORDER BY teid";
    $time_entry_results = db_query($sql, $user->uid, $stamp, (strtotime("+1 day", $stamp)-1));
    $total_duration = 0;
    // Loop throug each
    while ($time_entry_result = db_fetch_object($time_entry_results)) {
      // Load the time entry node object
      $time_entry = node_load(array('nid' => $time_entry_result->nid));
      // Load the casetracker project node object
      $project = node_load(array('nid' => $time_entry->casetracker->pid));
      // Container for row data to display a time entry
      $row = array();
      // The little colorful project icon next to time entries in the time_sheet
      // And the time_entry item name. Both linked
      $row[] = theme('crayon_swatch', $project->nid, crayon_generate_acronym($project->title), $project->title, "node/{$project->nid}") . l($time_entry->title, 'node/' . $time_entry->nid, array('attributes' => array('class' => 'time-sheet-case')));
      // The amount of time logged for this item
      $row[] = array('data' => format_plural($time_entry_result->duration, '1 hour', '@count hours'), 'align' => 'right');
      // On going add-up of the total duration of time logged this week
      $total_duration = $total_duration + $time_entry_result->duration;
      // Add the row to the rows
      $rows[] = array('data' => $row);
    }
    
    // As long as this day has a time entry, the row array will
    // be populated with more than 1 item
    if (count($row) > 1) {
      $row = array();
      $row[] = '<strong>' . t("Total hours for") . " " . date("l", $stamp) . '</strong>';
      $row[] = array('data' => '<strong>' . format_plural($total_duration, '1 hour', '@count hours') . '</strong>', 'align' => 'right');
      $rows[] = array('data' => $row);
    } else {
      $row = array();
      $row[] = array('data' => t("No time entered."), 'colspan' => 2);
      $rows[] = array('data' => $row);
    }
    
    $row = array();
    // Put the form to add a case for this day at the bottom of the day's table
    $row[] = array('data' => drupal_get_form('time_sheet_case_list_form', $user, $day, $stamp), 'colspan' => 2);
    $rows[] = array('data' => $row, 'id' => 'case-details-' . $day);
    
    // Add this day to the table
    $output .= theme('table', $header, $rows, array('id' => 'time-sheet-' . $day));
  }

  return $output;
}

/**
 * Implementation of hook_form().
 * @desc Creates the form that provides the user with a select list of cases.
 * Implements Drupals AHAH for ajax type form submissions.
 *
 * @param $form_state
 * @param $user
 * @param $day
 */
function time_sheet_case_list_form(&$form_state, &$user, $day, $stamp) {
  $form = array();
  $form['time_sheet'][$day]['#cache'] = TRUE;
  //$form['#submit'][] = 'time_sheet_add_time_submit_handler';

  $form['time_sheet'][$day]['timestamp'] = array(
    '#type' => 'hidden',
    '#value' => $stamp,
  );

  $options = _time_sheet_case_list_options($user);

  $form['time_sheet'][$day]['case_list'] = array(
    '#type' => 'select',
    '#title' => 'Select a case',
    '#options' => $options,
    '#ahah' => array(
      'path' => 'time_sheet/add_time',
      'wrapper' => 'case-form-' . $day,
      'event' => 'change',
    ),
  );
  
  //The CSS for this module hides this next button if JS is enabled.
  // Does not work YET
  // $form['time_sheet'][$day]['show_case'] = array(
  //   '#type' => 'submit',
  //   '#value' => t('Select'),
  //   '#attributes' => array('class' => 'show-case'),
  //   '#submit' => array('time_sheet_add_time_submit_handler'), // Probably don't want to run this here
  // );
  
  // CSS hides this button.
  // Submit handlers defined in the ahah form do not get registered
  // This hidden button is will be passed as the 'clicked_button'
  // When the ahah submit button is pressed
  $form['time_sheet'][$day]['secret_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Secret Submit'),
    '#attributes' => array('class' => 'secret-submit'),
    '#validate' => array('time_sheet_add_time_submit_handler_validate'),
    '#submit' => array('time_sheet_add_time_submit_handler'),
  );
  
  $form['time_sheet'][$day]['case_form_wrapper'] = array(
    '#type' => 'markup',
    '#tree' => TRUE,
    '#value' => '<div id="case-form-' . $day . '"></div>',
  );
  
  // $time_tracker_time_entry_form = time_tracker_time_entry_form();
  // $form['time_sheet'][$day]['time_entry'] = $time_tracker_time_entry_form['time_tracker']['time_entry'];

  
  //dpm($form);
  //dpm($form_state);
  return $form;
}

// function time_sheet_case_list_form_submit($form, &$form_state) {
//   drupal_set_message(t('the form has been SUBmittEd'));
// }

/**
 * Page callback For when a user selects a case to add time to from the time sheet 
 *
 * TODO: Display the total amount of hours and estimated time.
 */
function time_sheet_add_time() {
  global $user;

  // The usual AHAH stuff that needs to be here for this to work....
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  $form = array();
  $case = node_load(array('nid' => $form_state['post']['case_list']));
  $project = node_load(array('nid' => $case->casetracker->pid));

  // Grab the total time spent on this ticket
  $case_results = db_query("SELECT * FROM {time_tracker_entry} WHERE nid = %d AND uid = %d", $case->nid, $user->uid);
  $total_time = 0;
  while ($result_case = db_fetch_object($case_results)) {
    $total_time = $total_time + $result_case->duration;
  }
  // Grab the total time estimate for this ticket
  $total_estimate = 0;
  $estimate_results = db_query("SELECT * FROM {time_estimate_entry} WHERE nid = %d", $node->nid);
  while ($estimate_result = db_fetch_object($estimate_results)) {
    $total_estimate = $estimate_result;
  }

  // TODO keep the start arg when submitting the form 
  // This way we will redirect to the correct week instead of always THIS week
  // if(arg(0)) {
  //   $form['#redirect'] = $path . arg(0);
  // }

  // add some case details so we know what we're dealing with
  $form['time_sheet']['case_details'] = array(
    '#type' => 'markup',
    '#value' => '<h3>' . $project->title . '</h3><p>' . $case->teaser . '</p><p><em>Time spent by you on this ticket so far: ' . format_plural($total_time, '1 hour', '@count hours') . '</em></p><p><em>Estimated time for this ticket: ' . format_plural($total_estimate, '1 hour', '@count hours') . '</em></p>',
    '#prefix' => '<div class="case-details">',
    '#suffix' => '</div>',
    '#weight' => -10,
  );

  $case_status_options = casetracker_realm_load('status');
  $default_status = !empty($case->casetracker->case_status_id) ? $case->casetracker->case_status_id : variable_get('casetracker_default_case_status', key($case_status_options));

  $form['time_sheet']['case_status_id'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#default_value' => $default_status,
    '#options' => $case_status_options,
  );
  
  // Insert different form elements depending on the time_entry_method
  if (variable_get('time_entry_method', 'duration') == 'duration') {
    $form['time_sheet']['duration'] = array(
        '#title' => t('Hours'),
        '#type' => 'textfield',
        '#size' => '10',
        '#required' => TRUE,
        '#default_value' => $time_tracker_data->duration,
        '#description' => t('eg. 2.5 for two and a half hours'),
      );
  }
  else {
    $form['time_sheet']['start'] = array(
      '#title' => t('Start'),
      '#type' => 'textfield',
      '#size' => '10',
      '#required' => TRUE,
      '#default_value' => $time_tracker_data->duration,
      '#description' => t('Use the format hh:mmAM/PM e.g. 12:30PM'),
    );
    $form['time_sheet']['end'] = array(
      '#title' => t('End'),
      '#type' => 'textfield',
      '#size' => '10',
      '#required' => TRUE,
      '#default_value' => $time_tracker_data->duration,
      '#description' => t('Use the format hh:mmAM/PM e.g. 12:30PM'),
    );
  }
  
    $activities = array();
    $results = db_query("SELECT * FROM {time_tracker_activity} ORDER BY weight ASC");
  
    while ($result = db_fetch_object($results)) {
      $activities[$result->taid] = $result->name;
    }
  
    $form['time_sheet']['activity'] = array(
      '#title' => t('Activity'),
      '#type' => 'select',
      '#default_value' => $time_tracker_data->activity,
      '#options' => $activities,
    );
  
  $form['time_sheet']['comment'] = array(
    '#title' => 'Comment',
    '#type' => 'textarea',
    '#required' => TRUE,
    '#weight' => 98,
  );

  $form['time_sheet']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 99,
  );
  
  //dpm($form);

  drupal_process_form($form_id, $form, $form_state);
  //$form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  drupal_json(array(
    'status'   => TRUE,
    'data'     => drupal_render($form),
  ));
  
}

/**
 * TODO: What does this do? Is it the submit handler for the ahah case list
 * when javascript isn't present? Yes. But the no javascript form isn't ready yet...
 * @param $form
 * @param $form_state
 */
function time_sheet_form_submit($form, &$form_state) {

  if ($form_state['clicked_button']['#id'] == 'edit-submit') {
    $form_state['rebuild'] = FALSE;
    drupal_set_message(t('Form submitted'));
  }
  drupal_set_message(t('Form submitted'));
  // edit-next or anything else will cause rebuild.
  $form_state['rebuild'] = TRUE;
  
  // Redirect to current week view
  $form_state['redirect'] = drupal_get_destination();
}

/**
 * Validation for time sheet time submissions
 */
function time_sheet_add_time_submit_handler_validate($form, &$form_state) {
  if (variable_get('time_entry_method', 'duration') == 'duration') {
    if ($form_state['clicked_button']['#post']['duration'] && !is_numeric($form_state['clicked_button']['#post']['duration'])) {
      form_set_error('duration', t('Duration must be a number'));
    }
  }
  else {
    if ($form_state['clicked_button']['#post']['start'] && !preg_match('/^[0-9]{2}:[0-9]{2}(AM|PM)$/', $form_state['clicked_button']['#post']['start'])) {
      form_set_error('start', t('Start time must be in the format hh:mmAM/PM e.g. 12:30PM'));
    } elseif ($form_state['clicked_button']['#post']['end'] && !preg_match('/^[0-9]{2}:[0-9]{2}(AM|PM)$/', $form_state['clicked_button']['#post']['end'])) {
      form_set_error('end', t('End time must be in the format hh:mmAM/PM e.g. 12:30PM'));
    }
  }
}

/**
* Submit handler for the second drop down.
*/
// TODO: this function needs cleaning up. leverage the comment api
function time_sheet_add_time_submit_handler($form, &$form_state) {
  // TODO: do i need to get rid of this call for user object
  global $user;
  //dpm($form_state);
  $values = $form_state['values'];
  unset($form_state['submit_handlers']);

  form_execute_handlers('submit', $form, $form_state);

  $form_state['my_values'] = $values;
  $form_state['rebuild'] = FALSE;
  //dpm($form_state);
  $case = node_load(array('nid' => $form_state['clicked_button']['#post']['case_list']));

  $comment['casetracker'] = get_object_vars($case->casetracker);
  $comment['casetracker']['assign_to'] = casetracker_get_name($comment['casetracker']['assign_to']);

  $comment['nid'] = $form_state['clicked_button']['#post']['case_list'];
  $comment['uid'] = $user->uid;
  $comment['comment'] = $form_state['clicked_button']['#post']['comment'];
  $comment['casetracker']['case_status_id'] = $form_state['clicked_button']['#post']['case_status_id'];

  $comment['cid'] = comment_save($comment);
  casetracker_comment($comment, 'update');

  $time['timestamp'] = $form_state['clicked_button']['#post']['timestamp'];
  if (variable_get('time_entry_method', 'duration') == 'duration') {
    $time['duration'] = $form_state['clicked_button']['#post']['duration'];
  }
  else {
    $time['start'] = $form_state['clicked_button']['#post']['duration'];
    $time['end'] = $form_state['clicked_button']['#post']['duration'];
    $time['duration'] = _time_tracker_parse_duration(convert_phptime_to_duration($time['start'], $time['end']));
  }
  $time['activity'] = $form_state['clicked_button']['#post']['activity'];
  $time['uid'] = $user->uid;
  $time['nid'] = $form_state['clicked_button']['#post']['case_list'];
  $time['cid'] = $comment['cid'];
  drupal_write_record('time_tracker_entry', $time);

  // TODO: Ajax this up.
  drupal_set_message('Activity Recorded');
  //drupal_goto('user/' . $user->uid . '/time_sheet');
}

function time_sheet_ahah() {
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);

  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  $changed_elements = $form['case-form-monday'];
  unset($changed_elements['#prefix'], $changed_elements['#suffix']); // Prevent duplicate wrappers.
  drupal_json(array(
    'status'   => TRUE,
    'data'     => drupal_render($form),
  ));
}

function _time_sheet_case_list_options($user) {
  // TODO: quick comment and time entry form
  // grab all cases that the user is assigned to
  $case_results = db_query("SELECT * FROM {casetracker_case} WHERE assign_to = " . $user->uid . " AND case_status_id NOT IN (6, 7, 8)");

  // cycle through cases to create the select options array
  $case_options = array('' => t('Select a case...'));
  while ($case_result = db_fetch_object($case_results)) {
    $case = node_load(array('nid' => $case_result->nid));
    $project = node_load(array('nid' => $case->casetracker->pid));

    $case_options[$project->title][$case->nid] = $case->title;

  }

  return $case_options;
}

  /**
   * Acronymizer function. Attempts to generate a reasonable acronym from a given string.
   */
  function acronymize($string, $reset = FALSE) {
    static $cache = array();

    if (!isset($cache[$string]) || $reset) {
      $split = preg_split('/[ .-]+/', $string, -1, PREG_SPLIT_NO_EMPTY);
      $acro = '';

      // Capital-letter based acronyms
      if (preg_match('/[0-9A-Z]+/', $string)) {

        // Eliminate small words
        foreach ($split as $k => $chunk) {
          // No caps or numbers, trash it
          if (!preg_match('/[0-9A-Z]+/', $chunk)) {
            unset($split[$k]);
          }
        }
        reset($split);

        // Multiword titles -- form acronym from key characters.
        if (count($split) > 1) {
          foreach ($split as $chunk) {
            $char = array();
            preg_match_all('/[0-9A-Z]/', $chunk, $char);
            $acro .= implode('', $char[0]);
          }
        }
        // 1 word titles
        else {
          $split = array_shift($split);
          $char = array();
          preg_match_all('/[0-9A-Z]/', $split, $char);
          // Use caps as the acronym, but if there's only 1 cap use the whole string.
          $acro = count($char[0]) > 1 ? implode('', $char[0]) : $split;
        }
      }
      // Lower case title, bail and use first word
      else {
        // Multi-word -- use first letter of each
        if (count($split) > 1) {
          foreach ($split as $chunk) {
            $acro .= drupal_substr($chunk, 0, 1);
          }
        }
        // Bail, use first word
        else {
          $acro = current($split);
        }
      }
      $cache[$string] = $acro;
    }

    return $cache[$string];
  }
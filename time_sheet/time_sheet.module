<?php
// $Id: time_sheet.module,v 1.5 2010/07/14 23:46:17 codi Exp $

/**
 * @file
 * Enables time sheet entry for users.
 */

function time_sheet_init() {
  drupal_add_css(drupal_get_path('module', 'time_sheet') .'/css/time_sheet.css');
}

/**
 * Implementation of hook_perm().
 */
function time_sheet_permission() {
 // if (module_exists('casetracker')) {
 //   return array('administer time sheet', 'view time sheet entries', 'enter time on time sheet for casetracker cases');
 // }
 // else {
    return array(
      'administer time sheet' => array(
        'title' => t('Administer Time Sheet'),
        'description' => t('TODO: Add descriptions'),
      ),
      'view time sheet entries' => array(
        'title' => t('View Time Sheet Entries'),
        'description' => t('TODO: Add descriptions'),
      ),
      'add time sheet entries' => array(
        'title' => t('Add Time Sheet Entries'),
        'description' => t('TODO: Add descriptions'),
      ),
    );
     
 // }
}

/**
 * Implementation of hook_help().
 */
function time_sheet_help($section, $arg) {
  switch ($section) {
    case 'admin/help#time_sheet':
      return t("<h2>Time Sheet</h2>
        <p>The time sheet provides a simple weekly summary of time entries for a give user. It can be found at (user/%user_id/time_sheet). There will also be a link as a local task (tab) on the user profile page.</p>
        <p>Settings for the Time Sheet can be found at admin/settings/time_tracker/time_sheets</p>
        ");
      break;
  }
}

/**
 * Custom Access Control
 */
function time_sheet_view_access($account) {
  global $user;
  if (is_numeric($account)) {
    $account = user_load($account);
  }
  // The user is not blocked and logged in at least once.
  if (!$account->access || !$account->status) {
    return false;
  }
  if ($account && $account->uid) {
    if ((user_access('view all time tracker entries') && user_access('view time sheet entries')) || user_access('administer users')) {
      return true;
    }
    if ((user_access('view own time tracker entries') && user_access('view time sheet entries')) && $user->uid == $account->uid) {
      return true;
    }
  }
  return false;
}

/*
 * Implementation of hook_menu().
 *
 * TODO: Add a menu item for administrators to view finalized time sheet entries.
 */
function time_sheet_menu() {
  $items = array();
  $items['user/%user/time_sheet'] = array(
    'title' => 'Time Sheet',
    'description' => 'My Time Sheet',
    'page callback' => 'time_sheet_page',
    'page arguments' => array(1),
    'access callback' => 'time_sheet_view_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['timesheet'] = array(
    'title' => 'Time Sheet',
    'page callback' => 'time_sheet_page',
    'access arguments' => array('view own time tracker entries'),
    'type' => MENU_CALLBACK,
  );
  $items['time_sheet/add_time/%user'] = array(
    'page callback' => 'time_sheet_add_time',
    'access callback' => 'time_sheet_view_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/people/time_tracker/time_sheets'] = array(
    'title' => 'Time Sheet',
    'description' => 'Configuration settings for the time tracker time sheets.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_sheet_settings_form'),
    'access arguments' => array('administer time sheet'),
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/config/people/time_tracker',
  );
  return $items;
}

/**
 * Implementation of hook_form().
 */
function time_sheet_settings_form() {
  $form = array();
  $form['time_sheet_settings']['time_sheet_week_start'] = array(
    '#type' => 'select',
    '#title' => t('First day of week'),
    '#default_value' => variable_get('time_sheet_week_start', 'monday'),
    '#options' => array(
      'sunday' => t('Sunday'),
      'monday' => t('Monday'),
      'tuesday' => t('Tuesday'),
      'wednesday' => t('Wednesday'),
      'thursday' => t('Thursday'),
      'friday' => t('Friday'),
      'saturday' => t('Saturday'),
    ),
  );

  $form['time_sheet_settings']['time_sheet_days_of_week'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Days of the week'),
    '#default_value' => variable_get('time_sheet_days_of_week', array('monday', 'tuesday', 'wednesday', 'thursday', 'friday')),
    '#options' => array(
      'sunday' => t('Sunday'),
      'monday' => t('Monday'),
      'tuesday' => t('Tuesday'),
      'wednesday' => t('Wednesday'),
      'thursday' => t('Thursday'),
      'friday' => t('Friday'),
      'saturday' => t('Saturday'),
    ),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_forms()
 */
function time_sheet_forms($form_id, $args) {
  if (strpos($form_id, 'time_sheet_case_list_form') !== FALSE) {
    $forms[$form_id] = array(
      'callback' => 'time_sheet_case_list_form',
    );
    return $forms;
  }
}

/**
 * The users time sheet page callback.
 *
 * @desc This callback displays a users time_sheet defaulting to the
 * current week.
 *
 * @param $user
 *    Can be a $user object, a $uid or left out entirely to load the current user
 */
function time_sheet_page($user = NULL) {
  // Display a message if no nodes are set up to track time on
  $tracking_time = FALSE;
  foreach (node_type_get_types() as $key => $value) {
    if (time_tracker_is_tracking_time($key)) {
      $tracking_time = TRUE;
      break;
    }
  }
  if (!$tracking_time) {
    drupal_set_message("No content types have been set up to track time on. This sheet will not be useful until you've set up at least one content type on which to track time. To begin tracking time, you first must enable time tracking on at least one content type. You can do so on any content type's edit page at admin/content/node-type/%content-type-name");
  }
  return theme('time_sheet_user_page', array('user' => $user));
}

/************************************************************************
 * THEME FUNCTIONS
*************************************************************************/

function time_sheet_theme() {
  return array(
    'time_sheet_user_page' => array(
    	'variables' => array('user' => NULL),
    ),
  );
}

/**
 * Theme function for the time_sheet user page
 *
 * @desc This callback displays a users time_sheet defaulting to the
 * current week.
 *
 * @param $user
 *    Can be a $user object, a $uid or left out entirely to load the current user
 *
 * @return
 *    A themed table of time entry data
 */
function theme_time_sheet_user_page($user = NULL) {
  $user = $user['user'];
  //Validates the user being passed in the path is a number (uid)
  
  if (is_numeric($user)) {
    $user = user_load($user);
  } // Load current user if it's null
  elseif ($user == NULL) {
    global $user;
  }

  // Get a start timestamp from the url parameters or set a default.
  if (!isset($_GET['start'])) {
    $start = time();
  } else {
    $start = $_GET['start'];
  }

  // Create a lookup table of time stamps for the week
  $date_lookup = array(
	        'sunday' => strtotime(date("Y\WW0", $start)),
	        'monday' => strtotime(date("Y\WW1", $start)),
                'tuesday' => strtotime(date("Y\WW2", $start)),
                'wednesday' => strtotime(date("Y\WW3", $start)),
                'thursday' => strtotime(date("Y\WW4", $start)),
                'friday' => strtotime(date("Y\WW5", $start)),
                'saturday' => strtotime(date("Y\WW6", $start))
                );

  // Get the configured days of the week
  $days_of_week = variable_get('time_sheet_days_of_week', array('monday', 'tuesday', 'wednesday', 'thursday', 'friday'));
  // Get the configured first day of the week
  $first_day = variable_get('time_sheet_week_start', 'monday');

  // A variable to store days at the beginning of the week
  // to be moved to the end of the week
  $days_at_end = array();
  // remove items at the beginning of the week until we get to the configured $first_day
  while (current($days_of_week) != $first_day && current($days_of_week)) {
    $days_at_end[] = array_shift($days_of_week);
  }

  // Put the days from the beginning at the end
  foreach($days_at_end as $day) {
    $days_of_week[$day] = $day;	
  }
  // If we started the week after sunday, the days that we move to the end
  // should be for next week, not week before.
  foreach($days_of_week as $key => $value){
    if(!in_array($value, $days_at_end)){
      $days[$value] = $date_lookup[$key];	
    }
    else{
      $days[$value] = strtotime('+ 1 week', $date_lookup[$key]);
    }
  }

  // Determine the neighbouring weeks timestamps.
  // Because of the way we structured the week, the next week will
  // start on the 8th day after $first day. And the previous week
  // will end 1 day before the $first day.
  $next_week = strtotime('+ 8 days', $days[$first_day]);
  $prev_week = strtotime('- 1 days', $days[$first_day]);

  // Output the week switcher.
  $output = '<span class="time-sheet-header">';
  $output .= l(t('&laquo;'), $_GET['q'], array('query' => array('start' => $prev_week), 'html' => 'TRUE'));
  $output .= ' ' . date("l, M jS", reset($days)) . ' - ' . date("l, M jS", end($days)) . ' ';
  $output .= l(t('&raquo;'), $_GET['q'], array('query' => array('start' => $next_week), 'html' => 'TRUE'));
  $output .= '</span>';

  // Loop through days of the week pulling time entries and generating a table.
  foreach ($days as $day => $stamp) {
    // The header displaying the date
    $header = array(array('data' => date("l, M jS Y", $stamp), 'colspan' => 3));
    // Rows Variable for later theme_table-ing
    $rows = array();
    // Get the all the time tracker entries for the date we're on
    
    if(user_access('view all time tracker entries')){
      $time_entry_results = db_select('time_tracker_entry', 'tte')
             ->fields('tte')
             ->condition('timestamp', array($stamp, (strtotime("+1 day", $stamp)-1), 'BEWTEEN'))
             ->orderBy('teid')
             ->execute();
    }
    else {
      $time_entry_results = db_select('time_tracker_entry', 'tte')
             ->fields('tte')
             ->condition('uid', $user->uid, '=')
             ->condition('timestamp', array($stamp, (strtotime("+1 day", $stamp)-1), 'BEWTEEN'))
             ->orderBy('teid')
             ->execute();	
    }
    $total_duration = 0;
    // Loop throug each
    while ($time_entry_result = $time_entry_results->fetchObject()) {
      // Container for row data to display a time entry
      $row = array();
      // Load the time entry node object
      $time_entry = node_load($time_entry_result->nid);
      $time_user = user_load($time_entry_result->uid);
      // Little extra love for casetracker
      //if (module_exists('casetracker')) {
          // Load the casetracker project node object
      //  $project = node_load(array('nid' => $time_entry->casetracker->pid));
      //  $project_link = ' in ' . l($project->title, 'node/' . $project->nid, array('attributes' => array('class' => 'time-sheet-project')));
      //  $row[] = l($time_entry->title, 'node/' . $time_entry->nid, array('attributes' => array('class' => 'time-sheet-node'))) . $project_link;
 
      //}
      // The little colorful project icon next to time entries in the time_sheet
      // And the time_entry item name. Both linked
      
      $row[] = l($time_entry->title, 'node/' . $time_entry->nid, array('attributes' => array('class' => 'time-sheet-node')));
      $row[] = l($time_user->name, 'user/' . $time_user->uid, array('attributes' => array('class' => 'time-sheet-user')));
      // The amount of time logged for this item
      $row[] = array('data' => _time_tracker_format_hours_to_hours_and_minutes($time_entry_result->duration - $time_entry_result->deductions), 'align' => 'right');
      // On going add-up of the total duration of time logged this week
      $total_duration = $total_duration + ($time_entry_result->duration - $time_entry_result->deductions);
      // Add the row to the rows
      $rows[] = array('data' => $row);
    }

    // As long as this day has a time entry, the row array will
    // be populated with more than 1 item
    if (isset($row) && count($row) > 1) {
      $row = array();
      $row[] = array('data' => '<strong>' . t("Total hours for") . " " . date("l", $stamp) . '</strong>', 'colspan' => 2);
      
      $row[] = array('data' => '<strong>' . _time_tracker_format_hours_to_hours_and_minutes($total_duration) . '</strong>', 'align' => 'right');
      $rows[] = array('data' => $row);
    } else {
      $row = array();
      $row[] = array('data' => t("No time entered."), 'colspan' => 3);
      $rows[] = array('data' => $row);
    }

    $row = array();
    // Put the form to add a case for this day at the bottom of the day's table
    if (user_access('add time sheet entries')) {
      $row[] = array('data' => drupal_get_form('time_sheet_case_list_form_' . $day, $user, $day, $stamp), 'colspan' => 3);
      $rows[] = array('data' => $row, 'id' => 'case-details-' . $day);
    }

    $table = array(
    	'header' => $header,
        'rows' => $rows,
        'attributes' => array('id' => array('time-sheet-' . $day)),
    );

    // Add this day to the table
    $output .= theme('table', $table);
  }

  return $output;
}


/************************************************************************
 * CASETRACKER TIME ENTRY FORM ON TIME SHEET
*************************************************************************/

/**
 * @desc Creates the form that provides the user with a select list of cases.
 * Implements Drupals AHAH for ajax type form submissions.
 *
 * @param $form_state
 * @param $user
 * @param $day
 */

function time_sheet_case_list_form($form, $form_state, $user, $day, $stamp) {
  $form = array();
  $form['time_sheet'][$day]['#cache'] = TRUE;
  $form['#submit'][] = 'time_sheet_add_time_submit_handler';

  $form['time_sheet'][$day]['timestamp'] = array(
    '#type' => 'hidden',
    '#value' => $stamp,
  );

  $options = _time_sheet_case_list_options($user);

  $form['time_sheet'][$day]['case_list'] = array(
    '#type' => 'select',
    '#title' => t('Select a task'),
    '#options' => $options,
    '#ajax' => array(
      'callback' => 'time_sheet_add_time',
      'wrapper' => 'case-form-' . $day,
      'event' => 'change',
    ),
  );

  // CSS hides this button.
  // Submit handlers defined in the ahah form do not get registered
  // This hidden button is will be passed as the 'clicked_button'
  // When the ahah submit button is pressed
  $form['time_sheet'][$day]['secret_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Secret Submit'),
    '#attributes' => array('class' => array('secret-submit')),
  );

  //$form['time_sheet'][$day]['#validate'] = 'time_sheet_add_time_submit_handler_validate';

  $form['time_sheet'][$day]['case_form_wrapper'] = array(
    '#prefix' => '<div id="case-form-' . $day . '">',
    '#suffix' => '</div>',
    //'#value' => '<div id="case-form-' . $day . '"></div>',
  );

  return $form;
}


/**
 * Page callback For when a user selects a case to add time to from the time sheet
 */
function time_sheet_add_time() {
  global $user;

  // The usual AHAH stuff that needs to be here for this to work....
  //$form_state = array('storage' => NULL, 'submitted' => FALSE);
  //$form_build_id = $_POST['form_build_id'];
  //$form = form_get_cache($form_build_id, $form_state);
  //$args = $form['#parameters'];
  //$form_id = array_shift($args);

  //$form_state['post'] = $form['#post'] = $_POST;
  //$form['#programmed'] = $form['#redirect'] = FALSE;

  $form = array();

  $task = node_load($form_state['post']['case_list']);
  $project = node_load($task->field_task_project['und'][0]['nid']);

  // Grab the total time spent on this ticket
  $case_results = db_select('time_tracker_entry', 'tte')
                    ->fields('tte')
                    ->condition('nid', $task->nid, '=')
                    ->condition('uid', $user->uid, '=')
                    ->execute();
  $total_time = 0;
  while ($result_case = $case_results->fetchObject()) {
    $total_time = $total_time + $result_case->duration;
  }
  // Grab the total time estimate for this ticket
  //$total_estimate = db_query("SELECT estimate FROM {time_estimate_entry} WHERE nid = :nid", array(':nid' => $task->nid))->execute()->fetchField();
                   dsm($project);
                   dsm($task);
  // add some case details so we know what we're dealing with
  /*$form['time_sheet']['case_details'] = array(
    
    '#markup' => '<h3>' . dsm($project) .
                   dsm($task) . '</h3><p>' . $task->teaser . '</p><p><em>' . t('Time spent by you on this case so far: ') . format_plural($total_time, '1 hour', '@count hours') . '</em></p>',
    '#prefix' => '<div class="case-details">',
    '#suffix' => '</div>',
    '#weight' => -10,
  );*/

  //$case_status_options = casetracker_realm_load('status');
  //$default_status = !empty($case->casetracker->case_status_id) ? $case->casetracker->case_status_id : variable_get('casetracker_default_case_status', key($case_status_options));


  // We need to know what to track the time on (nodes or comments)
  // But only if for some reason this person is tracking time on
  // both nodes and comments
  /*if (time_tracker_is_tracking_time($task->type) == 'both') {
    $track_time_on_options = array(
      'node' => 'Node',
      'comment' => 'Comment',
    );
    $form['time_sheet']['track_time_on_what'] = array(
      '#type' => 'select',
      '#title' => t('Track Time On'),
      '#default_value' => 'comment',
      '#options' => $track_time_on_options,
    );
  }*/
 // elseif (time_tracker_is_tracking_time($task->type) == 'node') {
  /*  $form['time_sheet']['track_time_on_what'] = array(
      '#type' => 'select',
      '#title' => t('Track Time On'),
      '#default_value' => 'node',
      '#options' => array('node' => 'Node'),
    );*/
 /* }
  elseif (time_tracker_is_tracking_time($task->type) == 'comment') {
    $form['time_sheet']['track_time_on_what'] = array(
      '#type' => 'select',
      '#title' => t('Track Time On'),
      '#default_value' => 'comment',
      '#options' => array('comment' => 'Comment'),
    );
  }

  $form['time_sheet']['case_status_id'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#default_value' => $default_status,
    '#options' => $case_status_options,
  );
*/
  // Insert different form elements depending on the time_entry_method
  if (variable_get('time_entry_method', 'duration') == 'duration') {
    $form['time_sheet']['duration'] = array(
        '#title' => t('Hours'),
        '#type' => 'textfield',
        '#size' => '10',
        '#required' => TRUE,
        '#description' => t('eg. 2.5 for two and a half hours'),
      );
  }
  else {
    $form['time_sheet']['start'] = array(
      '#title' => t('Start'),
      '#type' => 'textfield',
      '#size' => '10',
      '#required' => TRUE,
      '#description' => t('Use the format hh:mmAM/PM e.g. 12:30PM'),
    );
    $form['time_sheet']['end'] = array(
      '#title' => t('End'),
      '#type' => 'textfield',
      '#size' => '10',
      '#required' => TRUE,
      '#description' => t('Use the format hh:mmAM/PM e.g. 12:30PM'),
    );
  }

    $activities = _time_tracker_get_active_activities_options();

    $form['time_sheet']['activity'] = array(
      '#title' => t('Activity'),
      '#type' => 'select',
      '#options' => $activities,
    );

  $form['time_sheet']['comment'] = array(
    '#title' => 'Comment',
    '#type' => 'textarea',
    //'#required' => TRUE,
    '#weight' => 98,
  );

  $form['time_sheet']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 99,
  );

  drupal_process_form($form_id, $form, $form_state);
  
  return  drupal_render($form);
}

/**
 * TODO: What does this do? Is it the submit handler for the ahah case list
 * when javascript isn't present? Yes. But the no javascript form isn't ready yet...
 * @param $form
 * @param $form_state
 */
function time_sheet_form_submit($form, &$form_state) {

  if ($form_state['clicked_button']['#id'] == 'edit-submit') {
    $form_state['rebuild'] = FALSE;
    drupal_set_message(t('Form submitted'));
  }
  drupal_set_message(t('Form submitted'));
  // edit-next or anything else will cause rebuild.
  $form_state['rebuild'] = TRUE;

  // Redirect to current week view
  $form_state['redirect'] = $_SERVER['REQUEST_URI'];
}

/**
 * Validation for time sheet time submissions
 */
function time_sheet_add_time_submit_handler_validate($form, &$form_state) {
  if (variable_get('time_entry_method', 'duration') == 'duration') {
    if (strlen($form_state['clicked_button']['#post']['duration']) && _time_tracker_parse_duration($form_state['clicked_button']['#post']['duration']) === FALSE) {
      form_set_error('duration', t('Invalid duration value. You may enter time fractions such as 1.25 or hour and minute values such as 2:30.'));
    }
  }
  else {
    if ($form_state['clicked_button']['#post']['start'] && !preg_match('/^[0-9]{1,2}:[0-9]{2}(AM|PM)$/', $form_state['clicked_button']['#post']['start'])) {
      form_set_error('start', t('Start time must be in the format hh:mmAM/PM e.g. 12:30PM'));
    } elseif ($form_state['clicked_button']['#post']['end'] && !preg_match('/^[0-9]{1,2}:[0-9]{2}(AM|PM)$/', $form_state['clicked_button']['#post']['end'])) {
      form_set_error('end', t('End time must be in the format hh:mmAM/PM e.g. 12:30PM'));
    }
  }
  if (!$form_state['clicked_button']['#post']['track_time_on_what']) {
    form_set_error('track_time_on_what', t('Please select what you are tracking time on'));
  }
}

/**
* Submit handler for the second drop down.
*/
// TODO: this function needs cleaning up. leverage the comment api
function time_sheet_add_time_submit_handler($form, &$form_state) {
  // TODO: do i need to get rid of this call for user object
  global $user;

  //Some Variables for us to use
  $time = array();
  
    $time['note'] = $form_state['input']['comment'];
  

  // Set the timestamp
  $time['timestamp'] = $form_state['input']['timestamp'];

  // Pull the rounding data
  $rounding_interval = variable_get('time_tracker_rounding_interval', 0);
  $rounding_operation = variable_get('time_tracker_rounding_operation', 'auto');

  // Special handling based on the time entry method
  if (variable_get('time_entry_method', 'duration') == 'duration') {
    $time['start'] = 0;
    $time['end'] = 0;
    $time['duration'] = _time_tracker_round(_time_tracker_parse_duration($form_state['input']['duration']), $rounding_interval / 60, $rounding_operation);
  }
  elseif (variable_get('time_entry_method', 'duration') == 'interval') {
    $time['start'] = _time_tracker_round(strtotime($form_state['input']['start']), $rounding_interval * 60, $rounding_operation);
    $time['end'] = _time_tracker_round(strtotime($form_state['input']['end']), $rounding_interval * 60, $rounding_operation);
    $time['duration'] = _time_tracker_parse_duration(_time_tracker_convert_phptime_to_duration($time['start'], $time['end']));
  }

  // if (variable_get('time_entry_method', 'duration') == 'duration') {

  // }
  // else {
  //   $time['start'] = $form_state['clicked_button']['#post']['start'];
  //   $time['end'] = $form_state['clicked_button']['#post']['end'];
  //   $time['duration'] = _time_tracker_parse_duration(convert_phptime_to_duration($time['start'], $time['end']));
  // }
  $time['activity'] = $form_state['input']['activity'];
  $time['uid'] = $user->uid;
  $time['nid'] = $form_state['input']['case_list'];

  // Get the current path for redirection
  $destination = drupal_get_destination();
  $destination = $destination['destination'];

  $destination = explode('=', $destination);
  $path = explode('?', $destination[0]);
 
  // Redirect to current week view
  if (isset($destination[1])){
    $form_state['redirect'] = array($path[0],array('query' => array('start' => $destination[1])));
  }
  else{
    $form_state['redirect'] = array($path[0]);	
  }
  drupal_write_record('time_tracker_entry', $time);

  drupal_set_message(t('Time Entry Recorded'));
}


/************************************************************************
 * Helper Functions
*************************************************************************/

/**
 * Function produces a list of recent cases for $user
 * in the form of options for a select form field
 *
 * @param $user
 *    The user for whom to retrieve the cases for
 */
function _time_sheet_case_list_options($user) {
    $case_options = array('' => t('Select a task...'));
    $sql = new EntityFieldQuery();
    $sql->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'task')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_task_assigned', 'uid', $user->uid,'=')
        ->fieldCondition('field_task_status', 'tid', 42,'!=');

  $result = $sql->execute();
   
  if(isset($result['node'])) {
    // cycle through cases to create the select options array
    foreach($result['node'] as $task) {
      $task = node_load($task->nid);
      $project = node_load($task->field_task_project['und'][0]['nid']);
      $case_options[$project->title][$task->nid] = $task->title;
    }
  }

  return $case_options;
}
<?php
/**
 * @file
 * Enables time tracking on comments.
 */
 

function time_tracker_timer_init() {
  drupal_add_css(drupal_get_path('module', 'time_tracker_timer') .'/css/time_tracker_timer.css');
}

/***********************************************************************
 * DRUPAL HOOKS
 ***********************************************************************/

/**
 * Implementation of hook_perm().
 */
function time_tracker_timer_perm() {
  return array('view all timers', 'manually enter time', 'administer time tracker timer');
}

/**
 * Implementation of hook_menu().
 *
 */
function time_tracker_timer_menu() {
  $items = array();

  $items['time_tracker_timer/active'] = array(
    'title' => 'Active Timers',
    'description' => 'Currently active time tracker timers.',
    'page callback' => 'time_tracker_timer_active_timers',
    'access arguments' => array('view all timers'),
    'type' => MENU_CALLBACK,
  );
  
  $items['members/active_timers'] = array(
    'title' => 'Active Timers',
    'description' => 'Currently active time tracker timers.',
    'page callback' => 'time_tracker_timer_active_timers',
    'access arguments' => array('view all timers'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/settings/time_tracker/timer'] = array(
    'title' => 'Time Tracker Timer',
    'description' => 'Configuration settings for the time tracker timer.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_tracker_timer_settings_form'),
    'access arguments' => array('administer time tracker timer'),
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/settings/time_tracker',
  );

  return $items;
}

function time_tracker_timer_settings_form() {
    $form = array();

    $form['time_tracker_timer_settings']['time_tracker_timer_allow_multiple'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow users to have multiple active timers at one time'),
      '#default_value' => variable_get('time_tracker_timer_allow_multiple', FALSE),
      '#description' => t('Allow multiple timers per user.'),
    );

    return system_settings_form($form);
}

function time_tracker_timer_settings_form_submit($form, &$form_state) {
  foreach ($form_state['values'] as $taid => $activity) {
    drupal_write_record('time_tracker_activity', $form[$taid]['#activity'], array('taid'));
  }
}

/**
 * Implementation of hook_forms()
 *
 * This hook allows modules to build multiple forms from a single form 
 * "factory" function but each form will have a different form id for 
 * submission, validation, theming or alteration by other modules.
 *
 * The callback arguments will be passed as parameters to the function. 
 * Callers of drupal_get_form() are also able to pass in parameters. 
 * These will be appended after those specified by hook_forms().
 *
 * @param $form_id
 *    This is the form_id passed into drupal_get_form()
 *
 * @param $args
 *    An Array of the parameters that should be passed into the form funciton
 */
function time_tracker_timer_forms($form_id,$args){
  //Check if the form_id passed to drupal_get_form() contains the string 'mymodule_form'
  if (strpos($form_id, 'time_tracker_timer_startstop_form') !== FALSE) {
    // Lets attach mymodule_form to $forms[$form_id].  
    // This effectively allows you to use the same form builder 
    // function to build a form with any form_id of your choice.
      $forms[$form_id] = array(
        'callback' => 'time_tracker_timer_startstop_form',
      );
      return $forms;
   }
}

/**
 * Implementation of hook_nodeapi().
 */
function time_tracker_timer_nodeapi(&$node, $op) {
  switch ($op) {
    case 'view':
      if (module_exists('casetracker') && casetracker_is_case($node->type) && user_access('add time tracker entries')) {
        if (user_access('view all timers')) {
          $timer_results = db_query("SELECT * FROM {time_tracker_timer} WHERE nid = %d", $node->nid);
        } else {
          global $user;
          $timer_results = db_query("SELECT * FROM {time_tracker_timer} WHERE nid = %d AND uid = %d", $node->nid, $user->uid);
        }
        $timers = array();
        while ($timer = db_fetch_object($timer_results)) {
          $timers[] = $timer;
        }
        // Theme the timers and add them to the content of the node
        $node->content['time_tracker_timer'] = array(
          '#value' => theme('time_tracker_timer', $timers, $node),
          '#weight' => -3,
        );
      }
    break;
  }
}

/***********************************************************************
 * TIME TRACKER TIMER FORM
 ***********************************************************************/

/**
 * Builds the form for the timer
 */
function time_tracker_timer_startstop_form($form, &$node, $timer_state, $start_time=0, $uid=0) {
  global $user;
  if ($uid == 0) {
    $uid = $user->uid;
  }
  $form = array();
  // We need to pass the case details here.
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $node->casetracker->pid,
  );
  
  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $uid,
  );
  
  $form['h_uid'] = array(
    '#type' => 'hidden',
    '#value' => $uid,
  );
  
  $form['h_timer_state'] = array(
    '#type' => 'hidden',
    '#value' => $timer_state,
  );
  
  $form['timer_state'] = array(
    '#type' => 'value',
    '#value' => $timer_state,
  );

  if ($timer_state == 'start') {
    $form['submit'] = array(
      '#value' => t('Start timer'),
      '#type' => 'submit',
      '#button_type' => 'timer_control_start',
    );
  } elseif($timer_state == 'stop') {
    $form['start_time'] = array(
      '#type' => 'value',
      '#value' => $start_time,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Stop timer'),
      '#button_type' => 'timer_control_stop',
    );
  } elseif($timer_state == 'reset') {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Reset timer'),
      '#button_type' => 'timer_control_reset',
    );
  }
  
  $form['#submit'][] = 'time_tracker_timer_startstop_form_submit';

  return $form;
}

/**
 * 
 * Implementation of hook_form_submit().
 */
function time_tracker_timer_startstop_form_submit($form, &$form_state) {
  global $user;
  if($form_state['values']['timer_state'] == 'start') {
    if(!variable_get('time_tracker_timer_allow_multiple', FALSE)) {
      $current_timers = db_query("SELECT * FROM {time_tracker_timer} WHERE uid = %d", $form_state['values']['uid']);
      $current_timer = db_fetch_object($current_timers);
    }

    if($current_timer) {
      drupal_set_message(t('You already have an active timer. ') . l(t('Click here to view it.'), 'node/' . $current_timer->nid), 'error');
    } else {
      //Create an onject to use for durpal_write_record
      //Object must match Schema
      $timerObj        = new stdClass();
      $timerObj->nid   = $form_state['values']['nid']; // may need to use clicked_button?
      $timerObj->pid   = $form_state['values']['pid'];
      $timerObj->uid   = $form_state['values']['uid'];
      $timerObj->start = time();
      //Write the new record
      $success = drupal_write_record('time_tracker_timer', $timerObj);
      //Let the user know if the write was successful (Timer was started)
      if($success) {
        drupal_set_message(t('Timer started'), 'message');
      } else {
        drupal_set_message(t('Could not start timer'), 'error');
      }
    }
  } elseif($form_state['values']['timer_state'] == 'stop') {

    $time_spent = format_interval(time() - $form_state['values']['start_time'], "1");
    //db_query('DELETE FROM {time_tracker_timer} WHERE nid = %d', $form_state['values']['nid']);
    $success = db_query("UPDATE {time_tracker_timer} SET stop = %d WHERE nid = %d AND uid = %d", time(), $form_state['values']['nid'], $form_state['values']['uid']);
    //Let the user know if the write was successful (Timer was stopped)
    if($success) {
      drupal_set_message(t('Timer stopped at: @time', array('@time' => $time_spent)), 'message');
    } else {
      drupal_set_message(t('Could not stop timer'), 'error');
    }
  } elseif($form_state['values']['timer_state'] == 'reset') {
    $success = db_query('DELETE FROM {time_tracker_timer} WHERE nid = %d AND uid = %d', $form_state['values']['nid'], $form_state['values']['uid']);
    if($success) {
      drupal_set_message(t('Timer reset'), 'message');
    } else {
      drupal_set_message(t('Could not reset timer'), 'error');
    }
  }
}

/**
 * Implementation of hook_form_alter()
 * 
 * This will check if it's a comment form, and if we're tracking time on it
 * If we are, then it checks for a time_tracker_timer record for the current
 * node and user and if one exists with a start AND a stop time, the time
 * is entered in the duration field of the time_tracker section.
 *
 * Also it hides any user input fields for time entries if the permission is not
 * set to allow manual time entries
 */
function time_tracker_timer_form_alter(&$form, $form_state, $form_id) {
  // if this is a comment form and we're tracking time on it.
  if ($form_id == 'comment_form' && user_access('add time tracker entries')) {
    global $user;
    // Only do this for the comments that don't exist yet
    if (!$form['cid']['#value']) {
      $timer_results = db_query("SELECT * FROM {time_tracker_timer} WHERE nid = %d AND uid = %d", $form['nid']['#value'], $user->uid);
      // There SHOULD be only one timer for each person per node but we'll loop anyway for now...
      while ($timer = db_fetch_object($timer_results)) {
        // Only do this if the timer has a start and stop value
        if ($timer->stop != 0 && $timer->start != 0) {
          // Extra submit function to clear the timer on save
          $form['#submit'][] = 'time_tracker_timer_cleartimer_submit';
          // If we're logging time by Duration...
          if (variable_get('time_entry_method', 'duration') == 'duration') {
            $form['time_tracker']['time_entry']['duration']['#default_value'] = convert_phptime_to_duration($timer->start, $timer->stop);
            // If user doesn't have permission, we hide the duration field
            if (!user_access('manually enter time')) {
              
            }
          }
          // If we're logging time by interval
          else {
            $format = TIME_TRACKER_DEFAULT_DATE_FORMAT; // This should be defined in settings...
            $form['time_tracker']['time_entry']['start']['#default_value'] = date($format, $timer->start);
            $form['time_tracker']['time_entry']['end']['#default_value'] = date($format, $timer->stop);
            // If user doesn't have access to manually enter time values
            if (!user_access('manually enter time')) {
              
            }
          }
        } 
      } // end while
    } 
    // If we're on an existing comment, then we need just need to hide the necessary
    // Fields if permissions don't allow manual time entry
    if (!user_access('manually enter time') && variable_get('time_entry_method', 'duration') == 'duration') {
      $form['time_tracker']['time_entry']['duration']['#type'] = 'hidden';
      $form['time_tracker']['duration_display']['#weight'] = 1;
      if ($form['time_tracker']['time_entry']['duration']['#default_value']) {
        $duration_display = t('Time: @time', array('@time' => $form['time_tracker']['time_entry']['duration']['#default_value']));
        $form['time_tracker']['duration_display']['#value'] = $duration_display;
      }
      else {
        $duration_display = t('Use the timer to log time');
        $form['time_tracker']['duration_display']['#value'] = $duration_display;
      }
    } 
    elseif (!user_access('manually enter time') && variable_get('time_entry_method', 'duration') == 'interval') {
      $form['time_tracker']['time_entry']['start']['#type'] = 'hidden';
      $form['time_tracker']['time_entry']['end']['#type'] = 'hidden';
      $form['time_tracker']['time_entry']['time_display']['#weight'] = 1;
      if ($form['time_tracker']['time_entry']['start']['#default_value'] && $form['time_tracker']['time_entry']['end']['#default_value']) {
        $time_display = t('Start Time: @start<br/>End Time: @end', array(
                        '@start' => $form['time_tracker']['time_entry']['start']['#default_value'],
                        '@end' => $form['time_tracker']['time_entry']['end']['#default_value']));
        $form['time_tracker']['time_entry']['time_display']['#value'] = $time_display;
      }
      else {
        $duration_display = t('Use the timer to log time');
        $form['time_tracker']['duration_display']['#value'] = $duration_display;
      }
    }
  }
}

/**
 * Function that will clear the timer on time entry submission if it exists
 * 
 * Added by hook_form_alter (above)
 */
function time_tracker_timer_cleartimer_submit($form, &$form_state) {
  //$timer_results = db_query("SELECT * FROM {time_tracker_timer} WHERE nid = %d AND uid = %d", $form['nid']['#value'], $user->uid);
  //while($timer = db_fetch_object($timer_results)){
    global $user;
    $success = db_query('DELETE FROM {time_tracker_timer} WHERE nid = %d AND uid = %d', $form['nid']['#value'], $user->uid);
    if(!$success) {
      drupal_set_message(t('Could not reset timer...'), 'error');
    }
  //}
}


/***********************************************************************
 * ACTIVE TIMERS DISPLAYS
 ***********************************************************************/

/**
 * The active timers page.
 */
function time_tracker_timer_active_timers() {
  $active_timers = db_query("SELECT * FROM {time_tracker_timer}");

  $output .= "<h2 class='node-title'>Active Timers</h2>";

  $rows = array();

  if(db_affected_rows() > 0) {
    while($timer = db_fetch_object($active_timers)) {
      $user = user_load($timer->uid);
      $ticket = node_load($timer->nid);
      $project = node_load($ticket->casetracker->pid);

      if($timer->stop == 0) {
        $rows[] = array(array('data' => theme('user_picture', $user)),
                        array('data' => t('@name has an active timer: ', array('@name' => $user->name)) . format_interval(time() - $timer->start, '1')) . "<br />" . l($ticket->title, 'node/' . $ticket->nid) . " in " . l($project->title, 'node/' . $project->nid),
        );
      } elseif ($timer->stop > 0) {
        $rows[] = array(array('data' => theme('user_picture', $user)),
                        array('data' => t('@name has an unsaved timer: ', array('@name' => $user->name)) . format_interval($timer->stop - $timer->start, '1')) . "<br />" . l($ticket->title, 'node/' . $ticket->nid) . " in " . l($project->title, 'node/' . $project->nid),
        );
      }
    }
  } else {
    $rows[] = array(array('data' => t('No active timers right now')));
  }
  $output .= theme('table', NULL, $rows, array('class' => 'time_tracker_timer_active_timers'));
  
  return $output;
}

/**
 * Implementation of hook_block()
 * 
 * Displays the current users active timers in a block
 */
function time_tracker_timer_block($op='list', $delta=0, $edit=array()) {
  switch ($op) {
    case 'list':
      $blocks['your_active_timers']['info'] = t('Your Active Timers');
      return $blocks;

    case 'view':
      switch ($delta) {
        case 'your_active_timers':
          $active_timers = array();
          $block['subject'] = t('Your Active Timers');
          $resource = db_query("SELECT * FROM {time_tracker_timer}");
          while($timer = db_fetch_object($resource)) {
            $active_timers[] = $timer;
          }
          $block['content'] = theme('time_tracker_timer_active_timers_block', $active_timers);

      }
      return $block;
  }
}

/***********************************************************************
 * THEME IMPLEMENTATIONS
 ***********************************************************************/

/**
 * Implementation of hook_theme().
 */
function time_tracker_timer_theme() {
  $hooks = array();
  
  $hooks['time_tracker_timer'] = array(
    'arguments' => array('timer_results' => NULL, 'node' => NULL),
  );
  
  $hooks['time_tracker_timer_active_timers_block'] = array(
    'arguments' => array('active_timers' => NULL),
  );
  
  return $hooks;
  
}

/**
 * Theme function for time_tracker_timer timers.
 */
function theme_time_tracker_timer($timers, &$node) {
  $rows =        array(); // Rows for current user timer messages
  $user_rows =   array(); // Rows for timer messages about other user timers
  $output =      '';
  $start_time = 0;
  $timer_state = 'start';
  drupal_add_js(drupal_get_path('module', 'time_tracker'). '/js/timer.js');

  // Loop through the results. Should only be ONE if user doesn't have 'view all' priveleges
  foreach ($timers as $timer) {
    global $user;
    // If the timer entry user id matches the current user then we process normally
    if ($timer->uid == $user->uid) {
      // If the timer doesn't have a stop value, it's still running
      if($timer->stop == 0) {
        //Change the timer state to be in "stop" mode
        $timer_state = 'stop';
        $start_time = $timer->start;
        // Format the rows for eventual theme_table
        $rows[] = array(
          'data' => array(
            array(
              // Note to self: I am able to ennumerate this form_id because of hook_forms() (above)
              'data' => drupal_get_form('time_tracker_timer_startstop_form_' . $timer->ttid, $node, $timer_state, $start_time),
              'class' => 'active_timer_control timer_control'
            ),
            array(
              'data' => _time_tracker_format_secs_to_hhmmss(time() - $timer->start),
              'class' => 'active_timer_time timer_time'
            ),
            array(
              'data' => t('Your timer is currently active.'),
              'class' => 'active_timer_msg timer_msg'
            ),
          ),
        );
      } 
      else {
        //If the timer has a stop value, then it has been stopped
        //BUT not saved since it still exists (should be deleted when stopped and saved)
        // Set the timer state to 'reset' mode
        $timer_state = 'reset';
        $hours_field_link = $node->path . '#comment-form';
        $rows[] = array(
          'data' => array(
            array(
              'data' => drupal_get_form('time_tracker_timer_startstop_form_' . $timer->ttid, $node, $timer_state, $start_time),
              'class' => 'stopped_timer_control timer_control'
            ),
            array(
              'data' => _time_tracker_format_secs_to_hhmmss($timer->stop - $timer->start),//
              'class' => 'stopped_timer_time timer_time'
            ),
            array(
              'data' => t('Your time has been entered below.  <a href="!hours_field_link">Please complete the form</a>', array('!hours_field_link' => base_path() . $hours_field_link)),
              'class' => 'stopped_timer_msg timer_msg',
            ),
          ),
        );
      }
    } 
    else {
      // If the timer entry id doesn't match the user, then we just want to add it to the
      // page to view, but not affect the how the timer button will work (i.e. start, stop, reset)
      // Load the user name
      $username = user_load($timer->uid)->name;
      if($timer->stop == 0) {
        $timer_state = 'stop';
        $user_rows[] = array(
          'data' => array(
            array(
              'data' => drupal_get_form('time_tracker_timer_startstop_form_' . $timer->ttid, $node, $timer_state, $timer->start, $timer->uid),//t('BUTTON PLACEHOLDER'),
              'class' => 'active_timer_control timer_control'
            ),
            array(
              'data' => _time_tracker_format_secs_to_hhmmss(time() - $timer->start),
              'class' => 'active_timer_time timer_time'
            ),
            array(
              'data' => t('@name has an unsaved timer entry for this ticket', array('@name' => $username)),
              'class' => 'active_timer_msg timer_msg'
            ),
          ),
        );
      } 
      else {
        //If the timer has a stop value, then it has been stopped
        //BUT not saved since it still exists (should be deleted when stopped and saved)
        $timer_state = 'reset';
        $user_rows[] = array(
          'data' => array(
            array(
              'data' => drupal_get_form('time_tracker_timer_startstop_form_' . $timer->ttid, $node, $timer_state, $timer->start, $timer->uid),//t("BUTTON PLACEHOLDER"),
              'class' => 'stopped_timer_control timer_control'
            ),
            array(
              'data' => _time_tracker_format_secs_to_hhmmss($timer->stop - $timer->start),//
              'class' => 'stopped_timer_time timer_time'
            ),
            array(
              'data' => t('@name has an unsaved timer entry for this ticket', array('@name' => $username)),
              'class' => 'stopped_timer_msg timer_msg',
            ),
          ),
        );
      }
    }
  }
  // If no rows were added there are no timer entries and the 'start timer' row must be displayed
  if (sizeof($rows) == 0) {
    $timer_state = 'start';
    $rows[] = array(
      'data' => array(
        array(
          'data' => drupal_get_form('time_tracker_timer_startstop_form_start', $node, $timer_state),
          'class' => 'new_timer_control timer_control'
        ),
        array(
          'data' => _time_tracker_format_secs_to_hhmmss(0),//
          'class' => 'new_timer_time timer_time'
        ),
        array(
          'data' => t('Click <em>start timer</em> to begin tracking your time'),
          'class' => 'new_timer_msg timer_msg',
        ),
      ),
    );
  }
  
  // add the other user rows on to the end of the control rows
  foreach($user_rows as $row) {
    $rows[] = $row;
  }
  
  // Add the output to the end of the casetracker_case_summary
  $output = '';
  $output .= theme('table', NULL, $rows, array('class' => 'time_tracker_timer'));

  return $output;
}

/**
 * Theme function for time_tracker_timer timers.
 */
function theme_time_tracker_timer_active_timers_block($active_timers) {
  
  global $user;
  
  $rows =        array(); // Rows for current user timer messages
  $output =      '';
  $start_time =  0;
  $timer_state = 'start';
  $other_timers = FALSE;
  drupal_add_js(drupal_get_path('module', 'time_tracker'). '/js/timer.js');
  t('You have no active timers at this time');
  
  // Loop through the results. Should only be ONE if user doesn't have 'view all' priveleges
  foreach ($active_timers as $timer) {
    $node = node_load($timer->nid);
    $project = node_load($node->casetracker->pid);
    // If the timer entry user id matches the current user then we process normally
    if ($timer->uid == $user->uid) {
      // If the timer doesn't have a stop value, it's still running
      if($timer->stop == 0) {
        //Change the timer state to be in "stop" mode
        $timer_state = 'stop';
        $start_time = $timer->start;
        // Format the rows for eventual theme_table
        $rows[] = array(
          'data' => array(
            array(
              'data' => '  ',
              'class' => 'timer_block_icon',
            ),
            array(
              'data' => _time_tracker_format_secs_to_hhmmss(time() - $timer->start),
              'class' => 'active_timer_time timer_block_time'
            ),
          ),
        );
        $rows[] = array(
          'data' => array(
            array(
              'data' => t('You have an active timer for ') . l($node->title, 'node/' . $node->nid) . " in " . l($project->title, 'node/' . $project->nid),
              'class' => 'active_timer_block_msg timer_block_msg',
              'colspan' => 2,
            ),
          ),
        );
      } 
      else {
        //If the timer has a stop value, then it has been stopped
        //BUT not saved since it still exists (should be deleted when stopped and saved)
        // Set the timer state to 'reset' mode
        $timer_state = 'reset';
        $hours_field_link = $node->path . '#edit-time-wrapper';
        $rows[] = array(
          'data' => array(
            array(
              'data' => '  ',
              'class' => 'timer_block_icon'
            ),
            array(
              'data' => _time_tracker_format_secs_to_hhmmss($timer->stop - $timer->start),//
              'class' => 'stopped_timer_time timer_block_time'
            ),
          ),
        );
        $rows[] = array(
          'data' => array(
            array(
              'data' => t('You have an unsaved timer for ') . l($node->title, 'node/' . $node->nid) . " in " . l($project->title, 'node/' . $project->nid),
              'class' => 'active_timer_block_msg timer_block_msg',
              'colspan' => 2,
            ),
          ),
        );
      }
    }
    else {
      // Make note that there are timers for other users
      $other_timers = TRUE;
    }
  }
  
  if (empty($rows)) {
    $output = t('You have no active timers at this time');
  }
  else {
    // Add the output to the end of the casetracker_case_summary
    $output = theme('table', NULL, $rows, array('class' => 'active_timers_block'));
  }
  
  if (user_access('view all timers') && $other_timers) {
    $output .= '<div class="see_all_timers">' . l(t('See all active timers'), 'time_tracker_timer/active') . '</div>';
  }

  return $output;
}


/***********************************************************************
 * HELPER FUNCTIONS
 ***********************************************************************/


/**
 * Formats php timestamps (in seconds) into hh:mm:ss - no limit on the hours
 */
function _time_tracker_format_secs_to_hhmmss($seconds) {
    $hours = sprintf('%02d', floor($seconds / 3600));
    $mins = sprintf('%02d', floor(($seconds % 3600) / 60));
    $secs = sprintf('%02d', (($seconds % 3600) % 60));
    return $hours . ":" . $mins . ':' . $secs;
}